<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Geshan's Blog]]></title>
  <link href="http://geshan.com.np/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://geshan.com.np/"/>
  <updated>2014-10-31T08:41:24+04:00</updated>
  <id>http://geshan.com.np/</id>
  <author>
    <name><![CDATA[Geshan Manandhar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Things I Wished I Knew While Doing My Tech Bachelor / Undergraduate (Slides and Video)]]></title>
    <link href="http://geshan.com.np/blog/2014/08/30/things-i-wished-i-knew-while-doing-my/"/>
    <updated>2014-08-30T17:12:00+04:00</updated>
    <id>http://geshan.com.np/blog/2014/08/30/things-i-wished-i-knew-while-doing-my</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Last week when I was in Kathmandu, Nepal I did a talk at <a href="http://prime.edu.np/" target="_blank">Prime College</a>, the <a href="https://www.facebook.com/PrimeCollegeEdu" target="_blank">college</a> where I did my bachelor (undergraduate) and my Plus 2. The talk was about &#8220;Things I wished I knew while doing my bachelor / undergraduate&#8221;.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-ZtKoXBoap4Q/VAHJsvUvyJI/AAAAAAAA1VY/i_yQa3M_AxI/s1600/IMG_6212.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-ZtKoXBoap4Q/VAHJsvUvyJI/AAAAAAAA1VY/i_yQa3M_AxI/s1600/IMG_6212.JPG" height="480" width="640" /></a></div><br />This talk was about how to use your bachelor to craft your tech career. I started with what I have done and some examples of where my friends have reached. Then I focused on things to consider for selecting and doing projects for technical subjects in bachelor study.<!-- more --><br /><br />After that I opened up the secrets of selecting a company and doing internship. To concluded I gave some tips on approaching the job market. I think the talk went good and I was able to convey my message correctly to all the participants. I hope the students will benefit from it.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-ANWhlgkDt30/VAHMMEwkPII/AAAAAAAA1Vs/OootCd-ErEc/s1600/IMG_6214.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-ANWhlgkDt30/VAHMMEwkPII/AAAAAAAA1Vs/OootCd-ErEc/s1600/IMG_6214.JPG" height="480" width="640" /></a></div><br /><h3 style="text-align: left;">Attentive Students</h3><div>Thankfully the bachelor students who attended the talk were very attentive and inquisitive towards what I was presenting. I was expecting more students from <a href="http://www.fomtu.edu.np/program_bim.php" target="_blank">Bachelor of Information Management</a> (BIM) but the majority were from <a href="http://www.bsccsit.com/" target="_blank">Bsc. CSIT</a> 6<sup>th</sup> semester. I am happy and thankful to the attendees who gave their time to listening to what I had to say.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-OteueCLjnOg/VAHKxTz6s_I/AAAAAAAA1Vg/hDbklcsNONE/s1600/IMG_6211.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-OteueCLjnOg/VAHKxTz6s_I/AAAAAAAA1Vg/hDbklcsNONE/s1600/IMG_6211.JPG" height="480" width="640" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><h3 style="clear: both; text-align: left;">The Slides</h3>Below are the slides of the talk:<br /><script async="" class="speakerdeck-embed" data-id="a612f9300f4b01323f425661ce134671" data-ratio="1.37265415549598" src="//speakerdeck.com/assets/embed.js"></script><br /><h3 style="text-align: left;">And the video</h3></div><div>The video of the talk is here, it has the full presentation and some questions:</div><center><iframe allowfullscreen="" frameborder="0" height="360" src="//www.youtube-nocookie.com/embed/Bipt8697_PI?rel=0" width="640"></iframe><br /></center><h3 style="text-align: left;">Conclusion</h3><div>Overall the weeks long preparation of the slides came out very fruitful. I am thankful to the college management and <a href="https://www.facebook.com/Happyboie?" target="_blank">Robert Shrestha</a> for his co-operation and help. I hope we can do other events or workshop like these at the college.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Overview of Message Queues - Rabbit Mq With Symfony 2 (Slides and Talk Video)]]></title>
    <link href="http://geshan.com.np/blog/2014/08/29/basic-overview-of-message-queues-rabbit/"/>
    <updated>2014-08-29T19:30:00+04:00</updated>
    <id>http://geshan.com.np/blog/2014/08/29/basic-overview-of-message-queues-rabbit</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Exactly a week ago, I was in Kathmandu, Nepal my hometown where I attended the <a href="https://www.facebook.com/events/759391620784857/" target="_blank">12<sup>th</sup> edition of PHP Developers Meetup</a>&nbsp;organized by <a href="https://www.facebook.com/groups/109070762572263/" target="_blank">PHP Developers Nepal</a> at <a href="http://www.lftechnology.com/" target="_blank">Leapfrog Technology</a>, Hattiban, Lalitpur.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-dBCtZ_OpwZA/VAFsq1pgUhI/AAAAAAAA1Uc/CBRm8fNHh-Q/s1600/2014-08-23%2B10.48.05.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-dBCtZ_OpwZA/VAFsq1pgUhI/AAAAAAAA1Uc/CBRm8fNHh-Q/s1600/2014-08-23%2B10.48.05.jpg" height="480" width="640" /></a></div><br /><h3 style="text-align: left;">The talk on Message Queue (Rabbit MQ and Symfony 2)</h3>Not only did I attend the event I also presented a talk on &#8221;<a href="http://mq-talk.herokuapp.com/" target="_blank">Message Queues - A basic overview</a>&#8221; where I talk about how we are using <a href="https://www.rabbitmq.com/" target="_blank">Rabbit Mq</a> at <a href="http://namshi.com/" target="_blank">Namshi</a>. There was no code examples, it was a plain experience sharing of how we use Rabbit Mq with <a href="http://symfony.com/" target="_blank">Symfony 2</a> with the <a href="https://github.com/videlalvaro/RabbitMqBundle" target="_blank">RabbitMq Budle</a>. There was a good overview of how and where we use Rabbit Mq for scalability and reliability.<!-- more --><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-boFWr6Aa1Vw/VAFvhdRIffI/AAAAAAAA1Uw/gsrzKWCpsVc/s1600/rabbit_mq_talk_logging.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-boFWr6Aa1Vw/VAFvhdRIffI/AAAAAAAA1Uw/gsrzKWCpsVc/s1600/rabbit_mq_talk_logging.jpg" height="426" width="640" /></a></div><br /><br />I did my talk at the end there were 2 other talks before me one from <a href="https://twitter.com/ojhaujjwal" target="_blank">Ujjwal Ojha</a> about using &#8221;<a href="http://www.slideshare.net/ujjwal-ojha/imagine-38284438" target="_blank">Imagine for Image manipulation</a>&#8221; and another one by <a href="https://twitter.com/shritesh" target="_blank">Shritesh Bhattarai</a>&nbsp;about &#8221;<a href="http://www.slideshare.net/shriteshbhattarai/restful-web-architecture" target="_blank">RESTful Web Architecture</a>&#8221;. Both of you guys you did a great job, I was amazing to see young guys take center stage when the older gurus were listening to you guys carefully.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-lAvT14uydow/VAF2kIvPMdI/AAAAAAAA1VI/6vH_DhJhNZc/s1600/Geshan_talking.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-lAvT14uydow/VAF2kIvPMdI/AAAAAAAA1VI/6vH_DhJhNZc/s1600/Geshan_talking.jpg" height="640" width="426" /></a></div><br />You can check the album on <a href="https://www.facebook.com/media/set/?set=a.688964327850471.1073741879.131245606955682" target="_blank">facebook</a> for more pictures and some more in this <a href="https://www.facebook.com/media/set/?set=pcb.762504590473560&amp;type=1" target="_blank">post</a>.<br /><h3 style="text-align: left;">The Slides</h3>You can check the slides below:<br /><script async="" class="speakerdeck-embed" data-id="b886b1c00cea0132e45d16030f01e0df" data-ratio="1.37265415549598" src="//speakerdeck.com/assets/embed.js"></script><br /><h3 style="text-align: left;">And the video</h3>The video of the talk is here as well (excuse us for some of the Nepali words and I could not capture the last slide and the questions but the 30 mins video below should be informative enough):<br /><center><iframe allowfullscreen="" frameborder="0" height="360" src="//www.youtube-nocookie.com/embed/Ul_LE0rzpek?rel=0" width="640"></iframe><br /></center><h3 style="text-align: left;">The discussion</h3><div style="text-align: left;">We had some discussion on how the talks were and took some feedback on what should we do next as a community with some members from Leapfrog technology and <a href="https://twitter.com/roshanbh" target="_blank">Roshan Bhattarai</a> had some points to clarify.<br /><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-dXIzGVF8m9c/VAFwOirJfeI/AAAAAAAA1U4/HySKOSxWoAI/s1600/php_meetup_discussion.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-dXIzGVF8m9c/VAFwOirJfeI/AAAAAAAA1U4/HySKOSxWoAI/s1600/php_meetup_discussion.jpg" height="426" width="640" /></a></div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">Group Photo</h3>Thanks to everyone who attended the event, finally there were some discussion on how to take the PHP developers community forward and we snapped a group photo to wrap up the event:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-IIcd2iZdzc0/VAFukKwuUmI/AAAAAAAA1Uo/3mWF1_N6SSM/s1600/PHP_Dev_meetup_12_Ktm_23-Aug-2014_group_photo.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-IIcd2iZdzc0/VAFukKwuUmI/AAAAAAAA1Uo/3mWF1_N6SSM/s1600/PHP_Dev_meetup_12_Ktm_23-Aug-2014_group_photo.jpg" height="360" width="640" /></a></div><br /><h3 style="text-align: left;">Conclusion</h3><div>I am really happy to know that there is a emerging PHP community in Kathamndu Nepal which has ~3900 members (where ~40 come for a program also because some people went to attend <a href="http://news.yahoo.com/nepalese-attempt-worlds-largest-human-flag-record-102255975.html" target="_blank">the world record largest human flag</a> on the same day.) and some other things:</div><div><ul style="text-align: left;"><li>PHP developers in Nepal are aware of the new technologies and tools like Vagrant, PHP 5.5 stuff etc.</li><li>There is still a lot of room for growth and development with active sharing of knowledge between developers.</li><li>We should target to conduct a International level PHP/Dev/Code conference in Kathmandu.</li></ul>Kudos to the organizers, keep these meetups coming.&nbsp;</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Git Tips Beyond the Basics]]></title>
    <link href="http://geshan.com.np/blog/2014/07/28/4-git-tips-beyond-basics/"/>
    <updated>2014-07-28T10:23:00+04:00</updated>
    <id>http://geshan.com.np/blog/2014/07/28/4-git-tips-beyond-basics</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">What is common between Google, Facebook, Microsoft, Twitter and Linked in? If you are looking for the answer its <a href="http://git-scm.com/" target="_blank">Git</a>&nbsp;the Distributed Version Control System (DVCS) that has simplified software revision control. Its major <a href="http://git-scm.com/about" target="_blank">features</a> are speed and performance combined with ease of use provided you know the basic git concepts.<br /><br />If you are new to git you should read some <a href="http://geshan.blogspot.ae/2012/02/git-introduction-and-hand-on-usage.html" target="_blank">getting started</a> tutorials or if you have used SVN you should read <a href="http://git-scm.com/book/en/Git-and-Other-Systems-Migrating-to-Git" target="_blank">migrating to git</a>. For the audience of this post, I assume that you are already using git for some time and are familiar with concepts like commit, push a branch, pull changes from remote repository, merging a branch to &#8220;master&#8221; and similar daily things that git users normally do.<br /><br />Git is a lot more popular than SVN or Mercurial. If you take check Google trends in the past 5 years (July 2009 - July 2014) in Internet and Telecom category, git it twice or move as popular as the other two:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-MYWJgIxDJRo/U9Xant4rMHI/AAAAAAAA0rM/6e3mV34bYX0/s1600/git-vs-svn-vs-mercurial.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-MYWJgIxDJRo/U9Xant4rMHI/AAAAAAAA0rM/6e3mV34bYX0/s1600/git-vs-svn-vs-mercurial.png" height="452" width="640" /></a></div><!-- more --><h2 style="text-align: left;">More on Git</h2><div>I started using git in early 2009, then I has little experience with SubVersion (SVN) and git was a refreshing change to slow and difficult SVN. At that time, we did not do much branching or follow the <a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank">git flow</a>&nbsp;branching model.<br /><br />I rediscover the power of Git in 2012 when I joined <a href="http://www.namshi.com/" target="_blank">Namshi</a> where we were a bigger team than I used to work with and Git made total sense. We were also using a revised git flow with lots of branching, merging, rebasing and tagging for releases.</div><div><br /></div><div>Recently I watched a video &#8220;Git happens&#8221; by&nbsp;<a href="http://twitter.com/jessitron" target="_blank">@Jessitron</a>&nbsp;and I refreshed the git concepts. This <a href="http://jessitron.github.io/git-happens/" target="_blank">video</a> is great not only that she is talking about git, also because it&#8217;s not a presentation she uses a whiteboard, markers and some sticky notes to make all the most important git concepts very clear to you. If you are using git I really recommend watching this:</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><iframe allowfullscreen="" frameborder="0" height="281" mozallowfullscreen="" src="//player.vimeo.com/video/46010208?portrait=0" webkitallowfullscreen="" width="500"></iframe><br /></div><div><br />And remember when using Git, its about telling the story of your project, how you and your team decide it will help maintain and informative history of your project.&nbsp;</div><h2 style="text-align: left;">The Tips</h2><div>Some Git tips beyond the basics (commit, pull, push) are as follows:<br /><h3 style="text-align: left;">Diff (what changed?)</h3></div><div>So you are working on a new feature on your branch my-feature, before you commit, you do a git status to list your files, then you need to know what changed in the files you should do <b>git diff</b> on your working directory. It will see all the changes you have made.</div><div><br /></div><pre class="shell" name="code">ᐅ git diff <br /><br />diff --git a/Dockerfile b/Dockerfile<br />index 392e7c0..a0a7c9f 100644<br />--- a/Dockerfile<br />+++ b/Dockerfile<br />@@ -48,6 +48,13 @@ ADD build/sites-enabled/dashboard       /etc/nginx/sites-enabled/dashboard<br /> ADD build/sites-enabled/test.local    /etc/nginx/sites-available/test.local<br /> ADD build/sites-enabled/test.local    /etc/nginx/sites-enabled/test.local<br /> <br />+ADD build/sites-enabled/drupal7.local    /etc/nginx/sites-available/drupal7.local<br />+ADD build/sites-enabled/drupal7.local    /etc/nginx/sites-enabled/drupal7.local<br />+<br />+ADD build/sites-enabled/drupal8.local    /etc/nginx/sites-available/drupal8.local<br />+ADD build/sites-enabled/drupal8.local    /etc/nginx/sites-enabled/drupal8.local<br />+<br />+#phpmyadmin<br /> ADD build/sites-enabled/phpmyadmin    /etc/nginx/sites-available/phpmyadmin<br /> ADD build/sites-enabled/phpmyadmin    /etc/nginx/sites-enabled/phpmyadmin<br /> <br />diff --git a/readme.md b/readme.md<br />index 7ddea6c..4188d66 100644<br />--- a/readme.md<br />+++ b/readme.md<br />@@ -1,6 +1,6 @@<br /> # Docker: Ubuntu, Nginx and PHP Stack<br /> <br />-This is the basis for LEMP stack (minus MySQL). This is based on [phusion/baseimage-docker](https://github.com/phusion/baseimage-docker) base Ubuntu image, which takes care of system issues which Docker's base Ubuntu image does not take care of, such as watching processes, logrotate, ssh server, cron and syslog-ng.<br />+This is the basis for LEMP stack (without MySQL). This is based on [phusion/baseimage-docker](https://github.com/phusion/baseimage-docker) base Ubuntu image, which takes care of system issues which Docker's base Ubuntu image does not take care of, such as watching processes, logrotate, ssh server, cron and syslog-ng.<br /></pre><div><br />You can also use git diff if you have already added the files to the staging area with git add, you will need to use <b>git diff &#8211;cached. </b>Diff can be used to compare branches and commits for example:<br /><br /><pre class="shell" name="code">✹✭ ᐅ <br />git diff master...my-feature<br /><br />diff --git a/Dockerfile b/Dockerfile<br />index 9f9cd77..392e7c0 100644<br />--- a/Dockerfile<br />+++ b/Dockerfile<br />@@ -6,34 +6,115 @@ RUN /etc/my_init.d/00_regen_ssh_host_keys.sh<br /> <br /> CMD ["/sbin/my_init"]<br /> <br />+# install certificates<br />+ADD build/certificates/server.crt /etc/nginx/certificates/<br />+ADD build/certificates/server.key /etc/nginx/certificates/<br />+<br /> # Nginx-PHP Installation<br /> RUN apt-get update<br /> RUN apt-get install -y vim curl wget build-essential python-software-properties<br /> RUN add-apt-repository -y ppa:ondrej/php5<br /> RUN add-apt-repository -y ppa:nginx/stable<br />+<br /> RUN apt-get update<br />+RUN apt-get install -y python-software-properties python python-setuptools ruby rubygems<br /></pre><br />It can be used on github as well, with a URL like:&nbsp;<a href="https://github.com/geshan/angular-presentation/compare/master...more-intro">https://github.com/geshan/angular-presentation/compare/master&#8230;more-intro</a>&nbsp;- so this is comparing master with the more-info branch. The same can be done with commit hashes.<br /><h3 style="text-align: left;">Global Git Ignore</h3><div>If you use an IDE and it creates folders like .settings or .idea and you want to ignore it globally on all git repositories you can do it with global git ignore rather than adding it to each .gitignore file in each repository. You can create a file say <b>global_gitignore </b>on your home directory and list the folders and files you want to be ignored in all git repositories like:</div><div><pre class="shell" name="code">#global git ignore<br />.idea<br />.settings<br /><br />/test.txt<br /></pre></div><div><br /></div>Then run the following command you will have the above git ignore rules applied to all the git repositories:<br /><pre class="shell" name="code">git config --global core.excludesfile ~/.gitignore_global<br /></pre><br />There are a lot of other <a href="http://git-scm.com/book/en/Customizing-Git-Git-Configuration" target="_blank">git configurations</a> you can try and tune git to meet your needs, if you want to look at the current configs applied to your git globally do <b>cat .gitconfig </b>on your home directory.<br /><h3 style="text-align: left;">Stash your work</h3></div><div>You are working on feature-a, an urgent bug say bug-x is discovered and you need to leave what you were doing for feature-a and fix bug-x. What do you do with the changed files in branch feature-a that you were working on, you don&#8217;t wan&#8217;t to commit or push it as its a work in progress. Here comes git stash to your rescue, you can just stash what you were doing on branch feature-a and finish work of bug-x then come back to feature-a branch and pop or apply your stash. How?<br /><br /></div><div><pre class="shell" name="code">✹ ᐅ cd my-project<br />✹ ᐅ git checkout -b feature-a<br /><br /># working on feature-a, some files changed say 3 of them<br /># bug-x discovered, need to fix it urgently so let's stash changes<br /># (save them for later)<br />✹ ᐅ git stash save feature-a<br /><br /># lets go to master and create a new branch to fix bug-x<br />✹ ᐅ git checkout master<br />✹ ᐅ git checkout -b bug-x<br /><br /># work to fix bug x for 1 hr, its fixed now.<br />✹ ᐅ git add .<br />✹ ᐅ git commit -m 'bug-x fixed with change in config files'<br />✹ ᐅ git push origin bug-x<br /><br /># then open a pull request on github for bug-x,<br /># and come back to working on feature-a<br /><br />✹ ᐅ git checkout feature-a<br />✹ ᐅ git stash pop</pre># all your changed files are back and you are at the stage<br /># where you left it before fixing bug-x</div><br />Stash pop will remove the last stash, you can do &nbsp;<b>git stash list </b>to check all your stashes, stashes can be saved without name and can be applied with the hash. Check the <a href="http://git-scm.com/book/en/Git-Tools-Stashing" target="_blank">stashing</a> docs for more information, generally I follow the above flow for staging and prefer not having any stashes in the list.<br /><h3 style="text-align: left;">Squash your commits</h3><div>You did this big feature taking 4 days work and as a good git user you did commits when the code was stable. So now you have 10 commits in total for the feature-b you worked in for 4 days. Do you really want to send a Pull Request with 10 commits, may be along the way you wrote some commits messages that are not so relevant now. So how do you get the 4 commits to become 1, its easy you squash your commits using&nbsp;<b>git reabse -i,</b>&nbsp;how?<br /><br />Now you have 4 commits (shown using <a href="http://git-scm.com/docs/gitk" target="_blank">gitk</a> ) on top of master:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-QhfIl3q029o/U9Xlc_2tD_I/AAAAAAAA0rc/6A0maq6LFKY/s1600/gitk-4-commits.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-QhfIl3q029o/U9Xlc_2tD_I/AAAAAAAA0rc/6A0maq6LFKY/s1600/gitk-4-commits.png" height="522" width="640" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">you need to execute the following command:</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"></div><pre class="shell" name="code">✹ ᐅ git rebase -i HEAD~4 #the last number, here 4 is the no. of commits you want to squash.<br /><br /># you will get a screen like this :<br /><br />pick 8dd81e6 feature-b changes to the config files<br />pick 7ea892d Feature-a fixed class A b and C<br />pick a465749 Feature-b fixed tests<br />pick cd6f406 Feature-b fixed tests<br /><br /><br /># change all picks except of the first one to s. <br /># s is short for squash like below:<br />pick 8dd81e6 feature-b changes to the config files<br />s 7ea892d Feature-a fixed class A b and C<br />s a465749 Feature-b fixed tests<br />s cd6f406 Feature-b fixed tests<br /><br /># now exit your editor, if you are using vim :wq<br /># then as you are squashing commits you can select which commit messages to pick<br /># from a screen like:<br /># This is a combination of 4 commits.<br /># The first commit's message is:<br />feature-b changes to the config files<br /><br /># This is the 2nd commit message:<br /><br />Feature-a fixed class A b and C<br /><br />- [x] Works for A and B<br /><br /># This is the 3rd commit message:<br /><br />Feature-b fixed tests<br /><br />* fixed most test<br /><br /># This is the 4th commit message:<br /><br />Feature-b fixed tests<br /><br />- [x] fixed all tests<br /><br /><br /># Pick the ones that you need or delete, for this example I will not delete anything<br /># and quit the editor<br /><br /># 4 of your commits are squashed into 1.<br /></pre><div class="separator" style="clear: both; text-align: left;"><br /></div>If your commit squash was successful, you will see only 1 commit in place of the 4 on gitk with all commit messages intact, like:<br /><div class="separator" style="clear: both; text-align: center;"></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-JSpIRmrwP6w/U9XncahVmRI/AAAAAAAA0rw/1pZY7m7Kidg/s1600/gitk-4-commts-squashed.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-JSpIRmrwP6w/U9XncahVmRI/AAAAAAAA0rw/1pZY7m7Kidg/s1600/gitk-4-commts-squashed.png" height="640" width="614" /></a></div></div><h2 style="text-align: left;">Conclusion</h2><div>This is just scratching the surface of git there are lots of other things that can be done with git, like <a href="http://git-scm.com/docs/git-cherry-pick" target="_blank">cherry pick</a> commits, list <a href="http://www.commandlinefu.com/commands/view/2345/show-git-branches-by-date-useful-for-showing-active-branches" target="_blank">git branches sorted by created date</a>, <a href="http://webchick.net/node/99" target="_blank">bisect</a> for debugging, you have to know how to <a href="http://githowto.com/resolving_conflicts" target="_blank">fix conflicts</a> with tools like <a href="http://meldmerge.org/" target="_blank">meld</a>&nbsp;etc.<br /><br />Then you have <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks" target="_blank">git hooks</a> which open up a new world of its own like having pre-commit hooks to <a href="http://carlosbuenosvinos.com/write-your-git-hooks-in-php-and-keep-them-under-git-control/" target="_blank">do checks of code and run tests</a>. Git has also been used to version control text related projects like <a href="https://www.gitbook.io/" target="_blank">books</a> not only code. So the possibilities are endless and if you are not using Git you are missing on a lot of things.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Bundles to Get Started With REST in Symfony 2 and Some Tips]]></title>
    <link href="http://geshan.com.np/blog/2014/07/18/3-bundles-to-get-started-with-rest-in/"/>
    <updated>2014-07-18T10:55:00+04:00</updated>
    <id>http://geshan.com.np/blog/2014/07/18/3-bundles-to-get-started-with-rest-in</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">&#8220;I found out that you guys just build an amazing mobile app for your e-commerce venture, I heard you are using Symfony 2 for your back-end APIs. How did you make it that fast?&#8221; This is not very different that what I was asked some months back. The answer is we use a <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank">Service Oriented Architecture (SOA) </a>where all back-end service follow the REST architecture to communicate with all the clients. The client can be built in any language as longs a they can do HTTP calls. Lets look at what Symfony 2 bundles you can use to build a similar scalable, fast and cacheable REST APIs.<br /><br />I assume that you have some experience with Symfony 2 including how to use <a href="https://getcomposer.org/doc/00-intro.md" target="_blank">composer</a> to download dependent libraries/bundles.<br /><h2 style="text-align: left;">What is REST</h2>REST, short form for&nbsp;Representational state transfer is a resource based client and server communication protocol which is stateless and cacheable. It is an abstraction over HTTP communication where emphasis is given on uniform interface to make the communication structured and consistent. This <a href="http://www.restapitutorial.com/lessons/whatisrest.html" target="_blank">video</a> describes the constraints of REST and explains what it is or read a simpler <a href="http://rest.elkstein.org/2008/02/what-is-rest.html" target="_blank">one</a>.<!-- more --><br /><br />REST is a lightweight substitute to older ways of doing web services like <a href="http://en.wikipedia.org/wiki/Remote_procedure_call" target="_blank">Remote Procedure Call</a> (RPC) and <a href="http://en.wikipedia.org/wiki/SOAP" target="_blank">Simple Object Access Protocol</a> (SOAP). Basically communication in REST happens in light weight format like JSON which makes it fast.<br /><br />Describing REST involves having knowledge if the HTTP methods (verbs) like GET, POST, PUT, DELETE. Before proceeding further <a href="http://www.restapitutorial.com/lessons/httpmethods.html" target="_blank">knowing</a>&nbsp;what are they used for will be essential. There is also lots of fuss about <a href="http://www.restapitutorial.com/lessons/restfulresourcenaming.html" target="_blank">how to name resources</a> (and corresponding URIs) but rather than doing things by the book making it logical and practical can be the best solution.<br /><br /><h2 style="text-align: left;">RESTing With Symfony 2</h2><div><a href="http://symfony.com/" target="_blank">Symfony</a> is a very loosely coupled framework which has lots of useful components structured in easily plug-able bundles. Here are 3&nbsp;useful public Symfony 2 bundles for your next project using REST with Symfony.</div><h3 style="text-align: left;">FOSRestBundle</h3><div>The <a href="https://packagist.org/packages/FriendsOfSymfony/rest-bundle" target="_blank">FOSRestBundle</a> provides a solid foundation to start building RESTful services in Symfony 2. It can provide with automated routing for resources (probably doctrine entity if you use doctrine). It provides a very good base for a format (JSON/HTML/XML) independent view layer.&nbsp;</div><div><br /></div><div>If you want to be able to encode or decode multiple format <a href="https://github.com/FriendsOfSymfony/FOSRestBundle" target="_blank">FOSRestBundle</a> recommends using <a href="https://github.com/schmittjoh/JMSSerializerBundle" target="_blank">JMSSerializerBundle</a>. The serializer bundle is like glove on the hand with FOSRestBundle to give out response in JSON/HTML/XML. Please go through the <a href="https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> very well and for custom routing you can use Symfony routing and not the one provide by FOSRestBundle. It is one of the most popular bundles in <a href="http://knpbundles.com/best" target="_blank">KNPBundles</a> and has been downloaded more than 784K times.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-dSAVmuiGqgw/U8i7PyW6H6I/AAAAAAAA0ns/w7KSttIS_VE/s1600/fos-rest-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-dSAVmuiGqgw/U8i7PyW6H6I/AAAAAAAA0ns/w7KSttIS_VE/s1600/fos-rest-bundle.png" height="410" width="640" /></a></div><h3 style="text-align: left;">NelmioApiDocBundle</h3><div><a href="https://packagist.org/packages/nelmio/api-doc-bundle" target="_blank">NelmioApiDocBundle</a> is a boon when developing REST web services on Symfony2. The <a href="https://github.com/nelmio/NelmioApiDocBundle" target="_blank">bundle</a> enables clean documentation of all API end points by just using some structured annotation. There are at least 2 amazing benefits using this bundle, first you can give the link to the docs (generally /api/doc) to anyone who wants to implement the REST API you have created. Second while developing you can test your API with the sandbox feature provided by this useful bundle, if you use the annotations correctly linking the involved forms.</div><div><br /></div><div>Restricting sandbox with user access might be a good feature to add on on this bundle. Reading the full <a href="https://github.com/nelmio/NelmioApiDocBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> is highly encouraged. It is also a very popular bundle with 473K downloads till date.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-dPLuYKdnhWc/U8i9kyXe7cI/AAAAAAAA0n4/kUl3jGfiU3M/s1600/nelmio-api-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-dPLuYKdnhWc/U8i9kyXe7cI/AAAAAAAA0n4/kUl3jGfiU3M/s1600/nelmio-api-bundle.png" height="520" width="640" /></a></div><div><h3>LexikJWTAuthenticationBundle</h3><div>As discussed REST is stateless, so for authentication you have to opt for some mechanism that can be communicate with each request. You can go for something like <a href="http://oauth.net/" target="_blank">Oauth</a>&nbsp;or use JSON Web Signature (JWS). There is already a public bundle the&nbsp;<a href="https://packagist.org/packages/lexik/jwt-authentication-bundle" target="_blank">LexikJWTAuthenticationBundle</a> using the <a href="https://github.com/namshi/jose" target="_blank">JOSE</a> library built at Namshi. It is recommended that you read about JWS and JSON Web Token (JWT) before using this bundle. It can be used by putting the token as a cookie for each request.</div></div><div><br /></div><div>It will enable role based access to your API end points, lets say you want normal users to create users and only admin users to update/delete users that will be easily possible using this <a href="https://github.com/lexik/LexikJWTAuthenticationBundle" target="_blank">bundle</a> than trying to generate a time limited key or some other type of authentication. Yes, reading the <a href="https://github.com/lexik/LexikJWTAuthenticationBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> of the bundle will help you achieve the desired output.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-WL-v27TBctg/U8jEeA0dvPI/AAAAAAAA0oM/3n8Smx-h-KQ/s1600/jwt-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-WL-v27TBctg/U8jEeA0dvPI/AAAAAAAA0oM/3n8Smx-h-KQ/s1600/jwt-bundle.png" height="342" width="640" /></a></div><br /></div><div><br /></div><div>I hope these modules will come in handy when you start your REST Api with symfony. For more features and to leverage REST to the fullest you can take a look at&nbsp;<a href="https://github.com/willdurand/BazingaHateoasBundle" target="_blank">BazingaHateoasBundle</a>&nbsp;and&nbsp;<a href="https://github.com/hautelook/TemplatedUriBundle" target="_blank">TemplatedUriBundle</a>.</div><h2 style="text-align: left;">Other Tips</h2><div>Some other things you can consider when building a REST based API with Symfony 2 are:</div><div><ol style="text-align: left;"><li>Use the validation groups in Symfony 2 and keep all the validation conditions as annotation in the Entity itself than at multiple places.</li><li>Keep the handing of forms central, though you will not show any HTML forms for the purpose of validation use the Symfony forms on top of the entities and link them to controllers which expose the end points.</li><li>Use the HTTP status code wisely like when a resource is created its not 200 OK its 201 Created, when you are paging results 206 will make for sense and if the user sent bad data 400 Bad Request is better.</li><li>&nbsp;Think how will you version your API early when you develop your API if today you use /api/V1 how will you use api/V2 and what will be its consequences.</li><li>Last but not he least be liberal on what you accept and strict on what you give out.</li></ol><div><blockquote>All in all Symfony is a great framework and doing REST in Symfony though not a piece of cake but is challenging yet rewarding.&nbsp;</blockquote></div></div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Big Thanks to All the Programmers, You Make the World Go Round]]></title>
    <link href="http://geshan.com.np/blog/2014/07/12/a-big-thanks-to-all-programmers-you/"/>
    <updated>2014-07-12T13:16:00+04:00</updated>
    <id>http://geshan.com.np/blog/2014/07/12/a-big-thanks-to-all-programmers-you</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Call them programmers or developers or software engineers, in this technology centered world, your life is a easier also because of them. If you notice you are addicted to technology in all aspects of your life now a days, you wake up when the alarm app rings on your phone, all day at work you are constantly checking email, after work you connect with your friends on facebook, before sleeping you browse through the news. All these activities are possible because one or more programmers wrote some working code and released the application that you are using on your desktop, laptop, mobile etc.<br /><br />It is structured words like the one you see below that is changing how we live in the current times.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-gLCd12P09gA/U8DvGaAZfaI/AAAAAAAA0nM/nl47mw5l_wU/s1600/sample-php-code.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-gLCd12P09gA/U8DvGaAZfaI/AAAAAAAA0nM/nl47mw5l_wU/s1600/sample-php-code.png" height="390" width="640" /></a></div><!-- more --><br /><h3 style="text-align: left;">How do programmers make the world go round?</h3>You just beeped your smart card at the metro/train station entrance, it showed you the current balance n the card on the small screen, how? Someone coded the software for the embedded system to detect the NFC chip and saved your valuable time and effort. There are other countless examples on every nook and corner you go today. You are able to catch up to the fast paced life because someone thought of a software solution to a problem and other people spent hours coding the right solution for it.<br /><br />When I worked for a Travel reporting system for UNICEF in Kathmandu, Nepal, it was a pleasure to know that after implementing the new system the reimbursement of travel expenses was 40% faster. I think each programmer/developer/software engineer whose project has gone live has one or more similar experiences.<br /><h3 style="text-align: left;">Due respect to other professionals</h3><div>Surely it is only only about programmers, like doctors save lives, engineers help build houses, pilots fly the plane. If you look at any profession software has changed how things are done now and how it was done some years back. Think of a banker who had to record all data on paper registers, now can simply enter the data to this awesome system and it is reported till the balance sheet.&nbsp;</div><div><br /></div><div>I would also like to convey my due respect to all other tech related jobs including systems analysts, project managers, data architects, system administrators they are all very important parts of the puzzle. &nbsp;&nbsp;</div><h3 style="text-align: left;">We need more programmers a.k.a super hero world changers :)</h3>I watched the <a href="http://www.youtube.com/watch?v=dU1xS07N-FA" target="_blank">video</a> below some times back and I think people should know that their live is a bit more easy because great ideas were successfully executed by talented programmers.<br /><br /><iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/nKIu9yen5nc" width="560"></iframe><br /><br />Computers are everywhere in all fields, so we will be needing more rock stars (programmers) who can transform from ideas on papers to real life applications that can be used by many people.<br /><br /><h3 style="text-align: left;">Programmers are addicted to code</h3>Starting to code is not easy and taking it as a profession does require lots of passion, determination and devotion. It takes lots of learning with hours and hours of thinking and making things work. After you pass the initial phase of how do I make it work then you start getting addicted to coding. It is an amazing feeling that you can build something and you dive deeper into it. It requires lots of problem solving and creativity to get things done and get it done right. I recently read &#8221;<a href="http://www.huffingtonpost.ca/suzanne-ma/computer-programming-women-html500-vancouver_b_4739610.html" target="_blank">How I hacked my husband&#8217;s code addiction</a>&#8221; which explains how programmers behave at times.<br /><br />All in all it is this passion and addition to code which keeps programmers glued to their machines hours on hours to come up with something productive and useful. That mobile app you think is helping you a lot was build by some programmers who had to go through lots of hard work to get the thing working. So respect the devotion, time and effort put in by programmers and other tech professionals.<br /><h3 style="text-align: left;">Programmers deserve a big thank you</h3><div>Regardless of the language used, the product platform or the audience scope, all programmers deserve a <b>big thank you</b>. Thanks for all the free apps I got to use, for the endless long hours programmers have put to get things work, ripping your hair off to make that test pass and seeing the tests turn green at midnight, &nbsp;for all the free and open source code that helped all other programmers. Hats off to your hard work. Keep up the good work and making the world a better place.</div></div></div>

]]></content>
  </entry>
  
</feed>
