<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | Geshan's Blog]]></title>
  <link href="http://geshan.com.np/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://geshan.com.np/"/>
  <updated>2014-10-31T08:41:24+04:00</updated>
  <id>http://geshan.com.np/</id>
  <author>
    <name><![CDATA[Geshan Manandhar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic Overview of Message Queues - Rabbit Mq With Symfony 2 (Slides and Talk Video)]]></title>
    <link href="http://geshan.com.np/blog/2014/08/29/basic-overview-of-message-queues-rabbit/"/>
    <updated>2014-08-29T19:30:00+04:00</updated>
    <id>http://geshan.com.np/blog/2014/08/29/basic-overview-of-message-queues-rabbit</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Exactly a week ago, I was in Kathmandu, Nepal my hometown where I attended the <a href="https://www.facebook.com/events/759391620784857/" target="_blank">12<sup>th</sup> edition of PHP Developers Meetup</a>&nbsp;organized by <a href="https://www.facebook.com/groups/109070762572263/" target="_blank">PHP Developers Nepal</a> at <a href="http://www.lftechnology.com/" target="_blank">Leapfrog Technology</a>, Hattiban, Lalitpur.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-dBCtZ_OpwZA/VAFsq1pgUhI/AAAAAAAA1Uc/CBRm8fNHh-Q/s1600/2014-08-23%2B10.48.05.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-dBCtZ_OpwZA/VAFsq1pgUhI/AAAAAAAA1Uc/CBRm8fNHh-Q/s1600/2014-08-23%2B10.48.05.jpg" height="480" width="640" /></a></div><br /><h3 style="text-align: left;">The talk on Message Queue (Rabbit MQ and Symfony 2)</h3>Not only did I attend the event I also presented a talk on &#8221;<a href="http://mq-talk.herokuapp.com/" target="_blank">Message Queues - A basic overview</a>&#8221; where I talk about how we are using <a href="https://www.rabbitmq.com/" target="_blank">Rabbit Mq</a> at <a href="http://namshi.com/" target="_blank">Namshi</a>. There was no code examples, it was a plain experience sharing of how we use Rabbit Mq with <a href="http://symfony.com/" target="_blank">Symfony 2</a> with the <a href="https://github.com/videlalvaro/RabbitMqBundle" target="_blank">RabbitMq Budle</a>. There was a good overview of how and where we use Rabbit Mq for scalability and reliability.<!-- more --><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-boFWr6Aa1Vw/VAFvhdRIffI/AAAAAAAA1Uw/gsrzKWCpsVc/s1600/rabbit_mq_talk_logging.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-boFWr6Aa1Vw/VAFvhdRIffI/AAAAAAAA1Uw/gsrzKWCpsVc/s1600/rabbit_mq_talk_logging.jpg" height="426" width="640" /></a></div><br /><br />I did my talk at the end there were 2 other talks before me one from <a href="https://twitter.com/ojhaujjwal" target="_blank">Ujjwal Ojha</a> about using &#8221;<a href="http://www.slideshare.net/ujjwal-ojha/imagine-38284438" target="_blank">Imagine for Image manipulation</a>&#8221; and another one by <a href="https://twitter.com/shritesh" target="_blank">Shritesh Bhattarai</a>&nbsp;about &#8221;<a href="http://www.slideshare.net/shriteshbhattarai/restful-web-architecture" target="_blank">RESTful Web Architecture</a>&#8221;. Both of you guys you did a great job, I was amazing to see young guys take center stage when the older gurus were listening to you guys carefully.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-lAvT14uydow/VAF2kIvPMdI/AAAAAAAA1VI/6vH_DhJhNZc/s1600/Geshan_talking.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-lAvT14uydow/VAF2kIvPMdI/AAAAAAAA1VI/6vH_DhJhNZc/s1600/Geshan_talking.jpg" height="640" width="426" /></a></div><br />You can check the album on <a href="https://www.facebook.com/media/set/?set=a.688964327850471.1073741879.131245606955682" target="_blank">facebook</a> for more pictures and some more in this <a href="https://www.facebook.com/media/set/?set=pcb.762504590473560&amp;type=1" target="_blank">post</a>.<br /><h3 style="text-align: left;">The Slides</h3>You can check the slides below:<br /><script async="" class="speakerdeck-embed" data-id="b886b1c00cea0132e45d16030f01e0df" data-ratio="1.37265415549598" src="//speakerdeck.com/assets/embed.js"></script><br /><h3 style="text-align: left;">And the video</h3>The video of the talk is here as well (excuse us for some of the Nepali words and I could not capture the last slide and the questions but the 30 mins video below should be informative enough):<br /><center><iframe allowfullscreen="" frameborder="0" height="360" src="//www.youtube-nocookie.com/embed/Ul_LE0rzpek?rel=0" width="640"></iframe><br /></center><h3 style="text-align: left;">The discussion</h3><div style="text-align: left;">We had some discussion on how the talks were and took some feedback on what should we do next as a community with some members from Leapfrog technology and <a href="https://twitter.com/roshanbh" target="_blank">Roshan Bhattarai</a> had some points to clarify.<br /><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-dXIzGVF8m9c/VAFwOirJfeI/AAAAAAAA1U4/HySKOSxWoAI/s1600/php_meetup_discussion.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-dXIzGVF8m9c/VAFwOirJfeI/AAAAAAAA1U4/HySKOSxWoAI/s1600/php_meetup_discussion.jpg" height="426" width="640" /></a></div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">Group Photo</h3>Thanks to everyone who attended the event, finally there were some discussion on how to take the PHP developers community forward and we snapped a group photo to wrap up the event:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-IIcd2iZdzc0/VAFukKwuUmI/AAAAAAAA1Uo/3mWF1_N6SSM/s1600/PHP_Dev_meetup_12_Ktm_23-Aug-2014_group_photo.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-IIcd2iZdzc0/VAFukKwuUmI/AAAAAAAA1Uo/3mWF1_N6SSM/s1600/PHP_Dev_meetup_12_Ktm_23-Aug-2014_group_photo.jpg" height="360" width="640" /></a></div><br /><h3 style="text-align: left;">Conclusion</h3><div>I am really happy to know that there is a emerging PHP community in Kathamndu Nepal which has ~3900 members (where ~40 come for a program also because some people went to attend <a href="http://news.yahoo.com/nepalese-attempt-worlds-largest-human-flag-record-102255975.html" target="_blank">the world record largest human flag</a> on the same day.) and some other things:</div><div><ul style="text-align: left;"><li>PHP developers in Nepal are aware of the new technologies and tools like Vagrant, PHP 5.5 stuff etc.</li><li>There is still a lot of room for growth and development with active sharing of knowledge between developers.</li><li>We should target to conduct a International level PHP/Dev/Code conference in Kathmandu.</li></ul>Kudos to the organizers, keep these meetups coming.&nbsp;</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Bundles to Get Started With REST in Symfony 2 and Some Tips]]></title>
    <link href="http://geshan.com.np/blog/2014/07/18/3-bundles-to-get-started-with-rest-in/"/>
    <updated>2014-07-18T10:55:00+04:00</updated>
    <id>http://geshan.com.np/blog/2014/07/18/3-bundles-to-get-started-with-rest-in</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">&#8220;I found out that you guys just build an amazing mobile app for your e-commerce venture, I heard you are using Symfony 2 for your back-end APIs. How did you make it that fast?&#8221; This is not very different that what I was asked some months back. The answer is we use a <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank">Service Oriented Architecture (SOA) </a>where all back-end service follow the REST architecture to communicate with all the clients. The client can be built in any language as longs a they can do HTTP calls. Lets look at what Symfony 2 bundles you can use to build a similar scalable, fast and cacheable REST APIs.<br /><br />I assume that you have some experience with Symfony 2 including how to use <a href="https://getcomposer.org/doc/00-intro.md" target="_blank">composer</a> to download dependent libraries/bundles.<br /><h2 style="text-align: left;">What is REST</h2>REST, short form for&nbsp;Representational state transfer is a resource based client and server communication protocol which is stateless and cacheable. It is an abstraction over HTTP communication where emphasis is given on uniform interface to make the communication structured and consistent. This <a href="http://www.restapitutorial.com/lessons/whatisrest.html" target="_blank">video</a> describes the constraints of REST and explains what it is or read a simpler <a href="http://rest.elkstein.org/2008/02/what-is-rest.html" target="_blank">one</a>.<!-- more --><br /><br />REST is a lightweight substitute to older ways of doing web services like <a href="http://en.wikipedia.org/wiki/Remote_procedure_call" target="_blank">Remote Procedure Call</a> (RPC) and <a href="http://en.wikipedia.org/wiki/SOAP" target="_blank">Simple Object Access Protocol</a> (SOAP). Basically communication in REST happens in light weight format like JSON which makes it fast.<br /><br />Describing REST involves having knowledge if the HTTP methods (verbs) like GET, POST, PUT, DELETE. Before proceeding further <a href="http://www.restapitutorial.com/lessons/httpmethods.html" target="_blank">knowing</a>&nbsp;what are they used for will be essential. There is also lots of fuss about <a href="http://www.restapitutorial.com/lessons/restfulresourcenaming.html" target="_blank">how to name resources</a> (and corresponding URIs) but rather than doing things by the book making it logical and practical can be the best solution.<br /><br /><h2 style="text-align: left;">RESTing With Symfony 2</h2><div><a href="http://symfony.com/" target="_blank">Symfony</a> is a very loosely coupled framework which has lots of useful components structured in easily plug-able bundles. Here are 3&nbsp;useful public Symfony 2 bundles for your next project using REST with Symfony.</div><h3 style="text-align: left;">FOSRestBundle</h3><div>The <a href="https://packagist.org/packages/FriendsOfSymfony/rest-bundle" target="_blank">FOSRestBundle</a> provides a solid foundation to start building RESTful services in Symfony 2. It can provide with automated routing for resources (probably doctrine entity if you use doctrine). It provides a very good base for a format (JSON/HTML/XML) independent view layer.&nbsp;</div><div><br /></div><div>If you want to be able to encode or decode multiple format <a href="https://github.com/FriendsOfSymfony/FOSRestBundle" target="_blank">FOSRestBundle</a> recommends using <a href="https://github.com/schmittjoh/JMSSerializerBundle" target="_blank">JMSSerializerBundle</a>. The serializer bundle is like glove on the hand with FOSRestBundle to give out response in JSON/HTML/XML. Please go through the <a href="https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> very well and for custom routing you can use Symfony routing and not the one provide by FOSRestBundle. It is one of the most popular bundles in <a href="http://knpbundles.com/best" target="_blank">KNPBundles</a> and has been downloaded more than 784K times.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-dSAVmuiGqgw/U8i7PyW6H6I/AAAAAAAA0ns/w7KSttIS_VE/s1600/fos-rest-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-dSAVmuiGqgw/U8i7PyW6H6I/AAAAAAAA0ns/w7KSttIS_VE/s1600/fos-rest-bundle.png" height="410" width="640" /></a></div><h3 style="text-align: left;">NelmioApiDocBundle</h3><div><a href="https://packagist.org/packages/nelmio/api-doc-bundle" target="_blank">NelmioApiDocBundle</a> is a boon when developing REST web services on Symfony2. The <a href="https://github.com/nelmio/NelmioApiDocBundle" target="_blank">bundle</a> enables clean documentation of all API end points by just using some structured annotation. There are at least 2 amazing benefits using this bundle, first you can give the link to the docs (generally /api/doc) to anyone who wants to implement the REST API you have created. Second while developing you can test your API with the sandbox feature provided by this useful bundle, if you use the annotations correctly linking the involved forms.</div><div><br /></div><div>Restricting sandbox with user access might be a good feature to add on on this bundle. Reading the full <a href="https://github.com/nelmio/NelmioApiDocBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> is highly encouraged. It is also a very popular bundle with 473K downloads till date.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-dPLuYKdnhWc/U8i9kyXe7cI/AAAAAAAA0n4/kUl3jGfiU3M/s1600/nelmio-api-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-dPLuYKdnhWc/U8i9kyXe7cI/AAAAAAAA0n4/kUl3jGfiU3M/s1600/nelmio-api-bundle.png" height="520" width="640" /></a></div><div><h3>LexikJWTAuthenticationBundle</h3><div>As discussed REST is stateless, so for authentication you have to opt for some mechanism that can be communicate with each request. You can go for something like <a href="http://oauth.net/" target="_blank">Oauth</a>&nbsp;or use JSON Web Signature (JWS). There is already a public bundle the&nbsp;<a href="https://packagist.org/packages/lexik/jwt-authentication-bundle" target="_blank">LexikJWTAuthenticationBundle</a> using the <a href="https://github.com/namshi/jose" target="_blank">JOSE</a> library built at Namshi. It is recommended that you read about JWS and JSON Web Token (JWT) before using this bundle. It can be used by putting the token as a cookie for each request.</div></div><div><br /></div><div>It will enable role based access to your API end points, lets say you want normal users to create users and only admin users to update/delete users that will be easily possible using this <a href="https://github.com/lexik/LexikJWTAuthenticationBundle" target="_blank">bundle</a> than trying to generate a time limited key or some other type of authentication. Yes, reading the <a href="https://github.com/lexik/LexikJWTAuthenticationBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> of the bundle will help you achieve the desired output.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-WL-v27TBctg/U8jEeA0dvPI/AAAAAAAA0oM/3n8Smx-h-KQ/s1600/jwt-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-WL-v27TBctg/U8jEeA0dvPI/AAAAAAAA0oM/3n8Smx-h-KQ/s1600/jwt-bundle.png" height="342" width="640" /></a></div><br /></div><div><br /></div><div>I hope these modules will come in handy when you start your REST Api with symfony. For more features and to leverage REST to the fullest you can take a look at&nbsp;<a href="https://github.com/willdurand/BazingaHateoasBundle" target="_blank">BazingaHateoasBundle</a>&nbsp;and&nbsp;<a href="https://github.com/hautelook/TemplatedUriBundle" target="_blank">TemplatedUriBundle</a>.</div><h2 style="text-align: left;">Other Tips</h2><div>Some other things you can consider when building a REST based API with Symfony 2 are:</div><div><ol style="text-align: left;"><li>Use the validation groups in Symfony 2 and keep all the validation conditions as annotation in the Entity itself than at multiple places.</li><li>Keep the handing of forms central, though you will not show any HTML forms for the purpose of validation use the Symfony forms on top of the entities and link them to controllers which expose the end points.</li><li>Use the HTTP status code wisely like when a resource is created its not 200 OK its 201 Created, when you are paging results 206 will make for sense and if the user sent bad data 400 Bad Request is better.</li><li>&nbsp;Think how will you version your API early when you develop your API if today you use /api/V1 how will you use api/V2 and what will be its consequences.</li><li>Last but not he least be liberal on what you accept and strict on what you give out.</li></ol><div><blockquote>All in all Symfony is a great framework and doing REST in Symfony though not a piece of cake but is challenging yet rewarding.&nbsp;</blockquote></div></div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With PHP (LEMP) on Vagrant, the Easiest Way]]></title>
    <link href="http://geshan.com.np/blog/2014/07/05/getting-started-with-php-lemp-on-vagrant/"/>
    <updated>2014-07-05T14:34:00+04:00</updated>
    <id>http://geshan.com.np/blog/2014/07/05/getting-started-with-php-lemp-on-vagrant</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">A software engineer tells to a colleague in his team &#8220;Man, it is working on your machine, but why is it not working on mine?&#8221;, then they both find out that one has Ubuntu 12.04 LTS with PHP 5.3 and the other software engineer on which the code is working is Ubuntu 14.04 with PHP 5.5 after some investigation. If you have ever faced this or similar problem its high time to switch to a portable and a reproducible virtual development environment shared among all team members. This is a context where <a href="http://www.vagrantup.com/" target="_blank">Vagrant</a> comes into play.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-0ekdx2Cp0uU/U7esIpWAFVI/AAAAAAAA0kg/ezrqt-e-CVE/s1600/vagrant.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-0ekdx2Cp0uU/U7esIpWAFVI/AAAAAAAA0kg/ezrqt-e-CVE/s1600/vagrant.png" height="360" width="640" /></a></div><br />If you have stack that involves many applications like PHP, Nginx, PHP-Fpm, Mysql, Rabbit Mq, Redis etc then making sure your team (even a small one with 3-4 members) have the same version for all above software will surely be a pain you don&#8217;t want to take care of.<br /><blockquote>This post is going to be developer&#8217;s perspective on using Vagrant as a virtualized development environment with minimal mention and coverage of the devOps and system side of Vagrant.</blockquote><!-- more --><h3 style="text-align: left;">What is Vagrant</h3>Vagrant is a container software that helps in creating virtual, lightweight, portable and reproducible development environment. Vagrant is a wrapper that can create a virtual machine using a provider like virtual box and a provisioner like puppet to create a server with exact requirements. It basically starts from a simple text file named Vagrantfile.<br /><h3 style="text-align: left;">Why Vagrant</h3>There are many reasons to use a virtual development machine, some of them are:<br /><br /><ol style="text-align: left;"><li>The <b>Vagrant virtual box is reproducible and portable</b> so all the team members share it and have the same development environment with all the software in desired versions.</li><li><b>Vagrant is OS agnostic</b>, it runs on Linux, Mac and Windows. The main thing is the virtual machine which is generally a Linux distro. So your software engineers can even use windows but have the same virtual box shared.</li><li><b>Vagrant saves time</b>, earlier it used to take at least more than one day to setup a development machine and all the applications. Now as the machine is already setup its the time it takes to download and build the machine. If you can build an automated installer for the application a new software engineer can get up and running in matter of hours and not day(s).</li><li><b>Updating existing software is easy</b>, if any software in the development stack changes lets say the team decides to use PHP 5.5 from PHP 5.4, the vagrant config is changed all users reload their vagrant machine and all team members have PHP 5.5.</li><li><b>Installing new software is easy</b>, lets say the team decides to use RabbitMq for messaging. RabbitMq can be added to the vagrant box in the vagrant config and all software engineers reload/reprovision their vagrant machines and all of them get RabbitMq.</li><li><b>Shared services, configs and file paths</b>, when you use vagrant the code base is in the host machine which is shared with the virtual box. The paths for all the application, application executable, services like nginx, mysql, configuration of the applications like error reporting in php.ini and even passwords like mysql root password are shared and consistent.</li></ol><h3 style="text-align: left;">Vagrant lingo</h3>To know Vagrant better you need to wrap your head around the Vagrant jargon. Here are some basic and important ones:<br /><h4 style="text-align: left;">Boxes</h4>A box is&nbsp;a package containing a representation of a virtual machine running a specific operating system, for a specific Provider. You can find a list of <a href="http://www.vagrantbox.es/" target="_blank">boxes</a> and start playing with them.<br /><h4 style="text-align: left;">Provider</h4><div>Providers are&nbsp;software responsible for creating and managing the virtual machines used by Vagrant. <a href="https://www.virtualbox.org/" target="_blank">VirtualBox</a> and <a href="http://www.vmware.com/" target="_blank">Vmware</a> are popular ones. For this example we will use VirtualBox.</div><h4 style="text-align: left;">Provisioner</h4><div>Provisioners are used to set up the virtual server, installing all necessary software and executing different commands in sequence. The most used provisioners are <a href="http://puppetlabs.com/" target="_blank">Puppet</a>, <a href="http://www.getchef.com/chef/" target="_blank">Chef</a> and <a href="http://www.ansible.com/home" target="_blank">Ansible</a>. Shell Script is also a very common option. We will use Puppet for this example and a <a href="http://www.erikaheidi.com/blog/vagrant-usage-research" target="_blank">survey</a> says its used the most.</div><h4 style="text-align: left;">Vagrantfile</h4><div>Vagrantfile is the main entry point file to build the vagrant virtual box, it is used to define the base box and other config like the memory to allocate to the virtual machine etc. Other configs like host, forwared port, synced folder etc on this file.</div><h3 style="text-align: left;">More on Vagrant</h3>Vagrant is very useful software to have a standard and consistent development environment shared among the team of software engineers. It capsules the software stack and its config with users in a virtual box which is portable and easily reproducible. If you want to know more about refer to the official <a href="https://docs.vagrantup.com/v2/" target="_blank">docs</a> and this series by <a href="http://www.erikaheidi.com/" target="_blank">Erika Heidi</a>&nbsp;in <a href="http://www.erikaheidi.com/blog/a-begginers-guide-to-vagrant-getting-your-portable-development-e" target="_blank">part 1</a>, <a href="http://www.erikaheidi.com/blog/a-beginners-guide-to-vagrant-part-2-provisioning-and-puppet" target="_blank">part 2</a> and <a href="http://www.erikaheidi.com/blog/a-beginners-guide-to-vagrant-and-puppet-part-3-facts-conditional" target="_blank">part 3</a> is also great to know more about Vagrant.<br /><br />Vagrant also has alternatives, while many may argue that comparing Vagrant and <a href="http://www.docker.com/" target="_blank">Docker</a> is comparing apples and oranges. In case of having a virtual machine for dev only they can be the two alternatives. Some early problems I faced with docker is, because it is a Linux container data persistence is an issue. Also for the development environment I don&#8217;t think that linking 4 containers to get PHP, MySql, RabbitMq, Redis working is really practical.<br /><br /><blockquote class="twitter-tweet" lang="en">Google Trends - Web Search interest: vagrant, docker - Worldwide, Jun 2013 - May 2014 <a href="http://t.co/ZpijZyixPd">http://t.co/ZpijZyixPd</a> <a href="https://twitter.com/hashtag/googletrendsexplore?src=hash">#googletrendsexplore</a><br />— Geshan Manandhar (@geshan) <a href="https://twitter.com/geshan/statuses/485291069819473920">July 5, 2014</a></blockquote><script async="" charset="utf-8" src="//platform.twitter.com/widgets.js"></script><br /><br />If you look at the current popularity in Google they are performing head to head.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-4vAwSP1jHao/U7eyrIRYlKI/AAAAAAAA0kw/CNKw9OLKabA/s1600/vagrant-vs-docker-June2013-May2014.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-4vAwSP1jHao/U7eyrIRYlKI/AAAAAAAA0kw/CNKw9OLKabA/s1600/vagrant-vs-docker-June2013-May2014.png" height="435" width="640" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div>As for now for my local development environment I am happy with Vagrant over Docker.<br /><h3 style="text-align: left;">PHP (LEMP) on vagrant, the easiest way</h3>In context of this post I will build and run a vagrant virtual box with LEMP - Linux Nginx Mysql and PHP with a GUI vagrant box builder <a href="https://puphpet.com/">Puphpet.com</a>. It is the easiest way as you just need to select what you need from the GUI get the file, then run vagrant up and you are done.<br /><br />This recipe is based on Network File System (<a href="http://docs.vagrantup.com/v2/synced-folders/nfs.html" target="_blank">NFS</a>) to share the project files from a Linux host machine which does not work in Windows. For this tutorial you will need to download and install the following prerequisites.<br /><ul style="text-align: left;"><li><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank">VirtualBox</a></li><li><a href="http://www.vagrantup.com/downloads.html" target="_blank">Vagrant</a></li></ul><br />How you install the above two will depend on your OS and if the OS is 32 bit or 64 bit. TO get NFS on your Ubuntu run : <b>sudo apt-get install nfs-server.</b><br /><br />After you have VirtualBox, Vagrant and NFS server installed on your host machine (main system preferably Ubuntu), then you can go to <a href="https://puphpet.com/" target="_blank">Puphpet.com</a>.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-UvR3NCDOjIc/U7e2Cc2rr4I/AAAAAAAA0k8/Sd2AodP4_es/s1600/puphpet.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-UvR3NCDOjIc/U7e2Cc2rr4I/AAAAAAAA0k8/Sd2AodP4_es/s1600/puphpet.png" height="360" width="640" /></a></div><div><br /></div>Follow the steps on the left one after the other, check &#8220;Locally&#8221; in &#8220;Where do you want your virtual machine?&#8221; part of the &#8220;Deploy Target&#8221; step. All other things are quite obvious, be sure to select &#8220;NFS&#8221; on the &#8220;Shared Folder Type&#8221; part. Please select &#8217;<b>../</b>&#8217; in&nbsp;<b>Box Sync Folder Source</b> part so that the vagrant and other projects can be placed on the same folder.<br /><div><br /></div><div>In the next section Server Packages, I added vim, git-core, htop and curl. You can add the packages you need.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-ypuD3wxjV7Y/U7e4_rXmtzI/AAAAAAAA0lI/qQgCsJORbrA/s1600/puphpet-section-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-ypuD3wxjV7Y/U7e4_rXmtzI/AAAAAAAA0lI/qQgCsJORbrA/s1600/puphpet-section-2.png" height="361" width="640" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">You can skip the firewall section, in the WebServers section select Nginx, and define if you need more virtual hosts. Awesome.dev is already added for you, if you need SSL that can also be checked.</div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-cPIATcICPSk/U7e5jelEYPI/AAAAAAAA0lQ/M_C2ApUY5E0/s1600/puphpet-webserver-04.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-cPIATcICPSk/U7e5jelEYPI/AAAAAAAA0lQ/M_C2ApUY5E0/s1600/puphpet-webserver-04.png" height="344" width="640" /></a></div><div class="separator" style="clear: both; text-align: left;">In the Language section you can select PHP with version 5.5, do add the PHP module you need like gd, mysql etc. I highly recommend you to check &#8216;XDebug&#8217; to use it with an IDE like PHPStorm or NetBeans.</div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-DoxhVmYt5yU/U7e6TgBhf-I/AAAAAAAA0lc/YFR8CHNtoFQ/s1600/puphpet-language05.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-DoxhVmYt5yU/U7e6TgBhf-I/AAAAAAAA0lc/YFR8CHNtoFQ/s1600/puphpet-language05.png" height="361" width="640" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">In the databases section you should select MySQL and add new databases if you need it, be sure of the root password. I would recommend downloading and installing PhpMyAdmin later with a different virtual host added to the config.yaml file later. If you need Redis, click Redis and check &#8216;Install Redis&#8217; as well.</div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-zwwMTtMpnxk/U7e7F_QaBAI/AAAAAAAA0lk/Ehqc-Ap77xw/s1600/puphpet-databases06.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-zwwMTtMpnxk/U7e7F_QaBAI/AAAAAAAA0lk/Ehqc-Ap77xw/s1600/puphpet-databases06.png" height="361" width="640" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">If you need RabbitMq you can install it in the next &#8220;Work Queues&#8221; section. Click &#8220;Work Queues&#8221; then &#8220;RabbitMQ&#8221; after than check &#8220;Install RabbitMQ&#8221;:</div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-exmWvMlWUJE/U7e7wi1ErKI/AAAAAAAA0lw/HBkP0YXH-Rs/s1600/puphpet-work-queues-7.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-exmWvMlWUJE/U7e7wi1ErKI/AAAAAAAA0lw/HBkP0YXH-Rs/s1600/puphpet-work-queues-7.png" height="353" width="640" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div>In the next section you can install &#8220;Elastic Search&#8221; if you need it as below:</div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/--fq1Ow4gOhc/U7e8_lOyorI/AAAAAAAA0l4/YDr14oJ9Nns/s1600/puphpet-search-server8.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/--fq1Ow4gOhc/U7e8_lOyorI/AAAAAAAA0l4/YDr14oJ9Nns/s1600/puphpet-search-server8.png" height="355" width="640" /></a></div><div>Then you can download your Vagrant configuration as a zip file as below:</div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-XmSLDqWncHY/U7e9WqKWhcI/AAAAAAAA0mA/unzRQeStG2g/s1600/puphpet-create09.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-XmSLDqWncHY/U7e9WqKWhcI/AAAAAAAA0mA/unzRQeStG2g/s1600/puphpet-create09.png" height="356" width="640" /></a></div><div>After you get the &#8217;<b>puphpet.zip</b>&#8217; named zip file unzip it, to get a randomly named folder like &#8217;<b>NGX2Rz</b>&#8217;, which will have the Vagrantfile and&nbsp;puphpet folder which has all the config for all the software stack selected in the GUI like below:</div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-GdNT9-my3Ic/U7e-aOjM1EI/AAAAAAAA0mM/5YSQk_2TdtE/s1600/unzip-puphpet.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-GdNT9-my3Ic/U7e-aOjM1EI/AAAAAAAA0mM/5YSQk_2TdtE/s1600/unzip-puphpet.png" height="264" width="640" /></a></div><div class="separator" style="clear: both; text-align: left;">I recommend creating a &#8216;projects&#8217; folder in you home so it will be /home/<yourusername>/projects and rename the NGX2Rz folder to vagrant then move /home/<yourusername>/projects folder. So you wll have /home/<yourusername>/projects/vagrant and your projects lets say my-project at /home/<yourusername>/projects/my-project.</yourusername></yourusername></yourusername></yourusername></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Then go to /home/<yourusername>/projects/vagrant which will have the Vagrantfile and puphpet folder, then run <b>vagrant up </b>to build your machine. You should get an output like this <a href="https://gist.github.com/geshan/c00298ea22c2d56cd5be" target="_blank">gist</a>&nbsp;it will take some time to download the box depending on your internet speed and some more time to build the machine.</yourusername></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div>While the machine is being download and built, you can add the new hosts to your <b>/etc/hosts</b>. Add<br /><br />192.168.56.101 vagrant.dev<br />192.168.56.101 awesome.dev<br /><br />Then after the machine is up you can access <b>awesome.dev</b> provided the folders are placed correctly and the nginx virtual host is fine. If you have installed Rabbit MQ you can access the management plugin at&nbsp;http://vagrant.dev:15672 .<br /><br />If you want to check the virtual machine or execute commands in the new virtual box managed by Vagrant you can do a <b>vagrant ssh </b>and login to the virtual box with SSH. You will see a bash like below:<br /><br /></div><div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-2mX0BWMV7rg/U7fBbjWLfnI/AAAAAAAA0mY/O3HessasIjQ/s1600/vagrant-ssh.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-2mX0BWMV7rg/U7fBbjWLfnI/AAAAAAAA0mY/O3HessasIjQ/s1600/vagrant-ssh.png" height="376" width="640" /></a></div>You can try htop command to check what is running on the machine. To get started with Vagrant <a href="http://scotch.io/tutorials/get-vagrant-up-and-running-in-no-time" target="_blank">Scotch</a> and <a href="http://briananglin.me/2013/11/what-is-vagrant/" target="_blank">Brian</a> also have good blog posts.<br /><h3 style="text-align: left;">Conclusion</h3></div><div>Vagrant is an amazing tool that enables producing portable, reproducible and consistent virtual development environment that can be shared with a team of software engineers. It saves you from installing the right version of PHP, MySQL and other needed software in the stack. You should really give it a try and move all your projects to Vagrant.</div><div><br /></div><div>PS: This is my 200th blog post and it has been more than 7 years I started blogging.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PHPUnit Data Provider for Less Code and Greater Coverage]]></title>
    <link href="http://geshan.com.np/blog/2014/02/01/using-phpunit-data-provider-for-less/"/>
    <updated>2014-02-01T11:51:00+04:00</updated>
    <id>http://geshan.com.np/blog/2014/02/01/using-phpunit-data-provider-for-less</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on"><div class="separator" style="clear: both; text-align: center;"></div>Writing testable code is a harder target to achieve than just writing tests for the code written. You cannot write comprehensive tests that covers many function each of 200 or more lines and classes that measure 1000s of lines of code (<a href="http://en.wikipedia.org/wiki/Source_lines_of_code" target="_blank">LOC</a>). Writing testable code is always important if you want to be able to test/unit test your code and be confident that nothing will break.<br /><br />Tests also help a lot when you re-factor some code or write new features. If all the tests are passing you are quite sure that nothing is breaking. Seeing all tests come out green is a very good sight for us software engineer.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-mIzQVI5oxMU/Uuu1Bn0PmKI/AAAAAAAAndg/Wkq0HGPD1pM/s1600/all_green_tests.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-mIzQVI5oxMU/Uuu1Bn0PmKI/AAAAAAAAndg/Wkq0HGPD1pM/s1600/all_green_tests.jpg" height="156" width="640" /></a></div><!-- more --><br /><h2 style="text-align: left;">Testing in PHP with PHPUnit</h2>Unit testing and testing as a whole is not a new thing in PHP, &nbsp;<a href="http://phpunit.de/" target="_blank">PHPUnit</a> the de facto unit testing framework in PHP started in <a href="http://gpfr.sourceforge.net/releases/phpunit-1.0.0/" target="_blank">2001</a>, The chart below shows that popularity of PHPUnit has really grown over the past years in comparison to <a href="http://www.simpletest.org/" target="_blank">Simple Test</a> another PHP testing framework.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-iY16ziAjtiE/UuylucQEn-I/AAAAAAAAndw/cSZ9W2csjUM/s1600/phpUnit_popularity.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-iY16ziAjtiE/UuylucQEn-I/AAAAAAAAndw/cSZ9W2csjUM/s1600/phpUnit_popularity.jpg" height="387" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;"><span style="font-size: small;">Source:&nbsp;</span><a href="http://www.google.com/trends/explore#q=phpunit%2C%20simpletest" style="font-size: medium;" target="_blank">Google Trends</a></td></tr></tbody></table>PHPUnit is a great unit testing framework that can automate testing and help in getting optimal output. As they state in the <a href="http://phpunit.de/manual/current/en/index.html" target="_blank">documentation</a>:<br /><blockquote>The difference between a good programmer and a bad programmer is that the good programmer uses tests to detect mistakes as soon as possible. The sooner you test for a mistake the greater your chance of finding it and the less it will cost to find and fix.</blockquote>It is true the sooner the problem is detected and fixed the better it is, same goes when some code is re-factored, a new feature is added or a bug resolved.<br /><h2 style="text-align: left;">Data Provider in PHPUnit</h2><div>There are may features of PHPUnit, which can help in writing comprehensive <a href="http://en.wikipedia.org/wiki/Unit_testing" target="_blank">unit testing</a> and moving toward the direction of <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">test driven development</a> (TDD). Among them,&nbsp;<a href="http://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers" target="_blank">data providers</a> provide arbitrary arguments to a test function so that same code can be used to test multiple scenarios and possible cases. In this very simple example I will use a part of checkout. The logic is very simple:</div><div><ol style="text-align: left;"><li>If the payment method is &nbsp;&#8220;Cash&#8221;, apply a cash on delivery fee of 5.0</li><li>If the payment method is &#8220;Credit Card&#8221;, do not apply a cash on delivery fee.&nbsp;</li></ol><h3 style="text-align: left;">The part of the checkout class is given below:</h3><script src="http://gist-it.appspot.com/https://github.com/geshan/dataprovider-example/blob/master/src/DataProvider/Example/Checkout.php"></script><br />Source: <a href="https://github.com/geshan/dataprovider-example/blob/master/src/DataProvider/Example/Checkout.php" target="_blank">Github repository</a><br /><br /><h3 style="text-align: left;">The test for the above checkout class is given below:</h3><script src="http://gist-it.appspot.com/https://github.com/geshan/dataprovider-example/blob/master/tests/DataProvider/Example/Test/CheckoutTest.php"></script><br />Source: <a href="https://github.com/geshan/dataprovider-example/blob/master/tests/DataProvider/Example/Test/CheckoutTest.php" target="_blank">Github repository</a><br /><h3 style="text-align: left;">What makes using data provider in this example relevant and optimal?</h3></div><div><ul style="text-align: left;"><li>As the test needs to be run for both &#8220;Cash&#8221; and &#8220;Credit Card&#8221; the only thing it changes here is the addition of cash on delivery fee.</li><li>There is just one test with the payment method being passed as a parameter, saving us from writing X no of tests for X no. of payment methods. So less code and more coverage.</li><li>The test is clear concise and understandable.</li></ul><h3 style="text-align: left;">Things to consider in the code:</h3><div><ul style="text-align: left;"><li>The test runs the as many times as the data set provided by the provider function.</li><li>@dataProvider annotation is necessary in the test to get the data sets from the provider function.</li><li>When writing the provider function, its better to comment who is using the provided data sets and the order of variables (check the comment of &nbsp;paymentMethodProvider method).</li></ul><div>Both the above files with composer.json is available as a public <a href="https://github.com/geshan/dataprovider-example" target="_blank">git repository</a> for your reference, you can check the <a href="https://github.com/geshan/dataprovider-example/blob/master/README.md" target="_blank">read me</a> file to know how to run the tests.</div></div><h2 style="text-align: left;">Conclusion</h2></div><div>Whenever you write tests and think, &#8220;Why am I writing a new test for the similar thing. I guess there can be a way to write less test/code and cover all my test cases.&#8221; Then is time to use data providers in PHPUnit. You save on time and effort to cover the cases, a new case is just another array in the provider function, even in case of new test cases being added its a one line change given the tests pass. I hope this helps you to write less test code and achieve more coverage.</div><div><br /></div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 PHP Development Improvements Rediscovered in 2013]]></title>
    <link href="http://geshan.com.np/blog/2014/01/10/5-php-development-improvements/"/>
    <updated>2014-01-10T11:27:00+04:00</updated>
    <id>http://geshan.com.np/blog/2014/01/10/5-php-development-improvements</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Love it or hate it, the fact is <a href="http://w3techs.com/technologies/history_overview/programming_language" target="_blank">80% of the web</a> is PHP and its usage has been in an increasing trend since 2010. Be informed that PHP is much better than you think as per&nbsp;<a href="http://fabien.potencier.org/article/64/php-is-much-better-than-you-think" target="_blank">Fabien Potencier</a>. As a <a href="http://tech.namshi.com/portfolio/" target="_blank">team</a>, we&nbsp;have worked a lot on PHP this year, specifically on <a href="http://symfony.com/" target="_blank">Symfony 2</a>&nbsp;mainly for our back-end APIs. It has really strengthen our multi-application <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank">SOA</a> platform and enabled us to build responsive front ends on top of it.<br /><br />In this process of having a robust back-end API, we have rediscovered and utilized some technologies inline with PHP development and improved on them in the past year. Here is a summary of these PHP related technologies/methods/best practices that will help all PHP developers:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-MwFJBHH84Ww/Us-MFH60P6I/AAAAAAAAnTQ/1Y7qEnUuMCU/s1600/005PHP_Things.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-MwFJBHH84Ww/Us-MFH60P6I/AAAAAAAAnTQ/1Y7qEnUuMCU/s1600/005PHP_Things.jpg" height="400" width="400" /></a></div><img /><!--more--><br /><h3>PHP Specification Request - PSR</h3>PSR (0-3) PHP Specification Request is a set of standards devised by the<a href="http://www.php-fig.org/" target="_blank"> PHP Framework Interoperability Group (FIG)</a> to standardize <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md" target="_blank">auto-loading</a>, <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md" target="_blank">coding standard</a>, <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide-meta.md" target="_blank">coding style</a> and <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md" target="_blank">logger interface</a>. PHP-FIG members include big names like Zend, Symfony, Drupal to name some. We follow a slightly modified version of PSR-2 as our coding standards.<br /><br />Writing clean code is always helpful and if you follow a widely accepted coding standard it makes it easier to open source the code. To make the process better you can use <a href="https://github.com/squizlabs/PHP_CodeSniffer" target="_blank">PHP code sniffer</a> and integrate it with your IDE for code evaluation while you type.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-Jp0OILLv7Lg/Us-HdQ5Mq-I/AAAAAAAAnTE/vMl0Z7gOV_4/s1600/01php_fig_psr.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-Jp0OILLv7Lg/Us-HdQ5Mq-I/AAAAAAAAnTE/vMl0Z7gOV_4/s1600/01php_fig_psr.png" height="243" width="400" /></a></div><br /><h3>Composer and Packagist</h3>Composer is dependency management tool in PHP which lets you define libraries that your project is dependent on. <a href="http://getcomposer.org/" target="_blank">Composer</a> uses simple JSON declaration of dependent project in composer.json files and downloads the related libraries in the vendor folder. <a href="http://getcomposer.org/doc/00-intro.md" target="_blank">Getting started</a> in easy with compser and all the opensource packages are listed in <a href="https://packagist.org/" target="_blank">packagist</a>, where you can search for packages you need.<br /><br />Lets say if you want to work on Paypal and think someone might have submitted a wrapper library for Paypal Rest API, you can search and find the library that suits your need. You can even submit your library/package to be open source and used by others. Composer really makes working with dependency and managing version of the dependent library an easy task.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-UfFC3YJNwQQ/Us-Nw55qorI/AAAAAAAAnTc/MPZ80brxYVc/s1600/02Composer_Packagist.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-UfFC3YJNwQQ/Us-Nw55qorI/AAAAAAAAnTc/MPZ80brxYVc/s1600/02Composer_Packagist.jpg" height="228" width="400" /></a></div><br /><h3>Virtual Development Environment - Vagrant</h3><a href="http://www.vagrantup.com/" target="_blank">Vagrant</a> is a virtual development environment which works as a virtual machine on your main machine with all needed software stack as config. Basically it creates a reproducible and portable development machine which is shared by all the developers, that in turn eliminates &#8220;Works on my machine&#8221; syndrome.<br /><br />Another thing it greatly helps is the time to set up a machine and get running. In our case, it came down from around 2 days to install all the software stack and configure all environments to mere 5 hours including the download of all needed software. If you want your developer to start coding on the first day, this is your best bet as s/he does not need to install the correct version of PHP, MYSQL, X-Debug and all other software.<br /><div class="separator" style="clear: both; text-align: center;"></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-YPC1Uux4_Pk/Us-PYPwyIuI/AAAAAAAAnTw/8Rk1S9x3L1Q/s1600/03Vagrant.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-YPC1Uux4_Pk/Us-PYPwyIuI/AAAAAAAAnTw/8Rk1S9x3L1Q/s1600/03Vagrant.png" height="192" width="400" /></a></div><br /><h3>Debugging with X-Debug</h3>Debugging in PHP used to be that elusive creature that you see sometimes and it just hides when you want to see it. On the contrary if you setup <a href="http://xdebug.org/" target="_blank">X-Debug</a> correctly on your machine (or your vagrant) you can run the debugger and inspect how your code executes line by line. Beware that its a correct mix of X-Debug, a client on your browser like <a href="https://addons.mozilla.org/en-US/firefox/addon/easy-xdebug/" target="_blank">easy Xdebug</a> for firefox and a good IDE that supports debugging like <a href="https://netbeans.org/downloads/index.html" target="_blank">NetBeans</a> or <a href="http://www.jetbrains.com/phpstorm/" target="_blank">PHPStorm</a>. Know well how to <a href="http://net.tutsplus.com/tutorials/tools-and-tips/xdebug-professional-php-debugging/" target="_blank">set it up</a>.<br /><br />In our case, X-Debug is installed on the vagrant machine so each developer does not need to manually install it. Just set up the preferred client on the browser and run the debugger on the IDE, then you can get new insights on how your code executes.<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-KeIbou7dBuc/Us-PV9FMkUI/AAAAAAAAnTs/7E9d2SpfdeQ/s1600/04Xdebug.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-KeIbou7dBuc/Us-PV9FMkUI/AAAAAAAAnTs/7E9d2SpfdeQ/s1600/04Xdebug.png" height="258" width="400" /></a></div><br /><h3>Automated Testing with PHPUnit</h3>When your code is tested and all tests pass (they are green! yehh) you are confident that things will not break on the production environment. Writing test verify what the code is supposed do and it serves as animated documentation of the code. Not only does it help save the development time on the long run, you are already aware of the related things that break due the the changes you made when you coded a feature/fix. We use <a href="http://phpunit.de/" target="_blank">PHPUnit</a>&nbsp;to test on our PHP code so that we know all our features are performing how it should.<br /><br />I would not call our way of testing <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development</a> (TDD) or core <a href="http://en.wikipedia.org/wiki/Unit_testing" target="_blank">Unit Testing</a> of each class. Rather its our own way of ensuring that the feature works as intended. We code the feature first and then write the test to verify if it meets the requirements. We generally ensure that before sending a pull request on <a href="https://github.com/" target="_blank">git hub</a> all the test pass.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-ip-gzNysvCI/Us-UNflvzOI/AAAAAAAAnUA/rkH4w8Q9WX0/s1600/05PhpUnit.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-ip-gzNysvCI/Us-UNflvzOI/AAAAAAAAnUA/rkH4w8Q9WX0/s1600/05PhpUnit.png" height="218" width="400" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">All in all 2013 has been a great year with lots of things to learn and explore, we experimented with many things as we raised our technical know how to a different level in terms of the tools we use. We went from a cron that runs every minute to <a href="http://www.rabbitmq.com/" target="_blank">Rabbit MQ</a> messaging queue that can be a different blog post :).</div><br /><blockquote>Now we follow continuous integration with <a href="https://travis-ci.org/" target="_blank">Travis CI</a>&nbsp;which runs the test we wrote with PHPUnit taking the code from Git Hub. I would like to thank <a href="http://www.namshi.com/" target="_blank">our</a> VP - Technology <a href="http://odino.org/" target="_blank">Alex</a>&nbsp;(<a href="https://twitter.com/_odino_" target="_blank">@_Odino_</a>) for his vision and implementation of &nbsp;above mentioned technologies. Lets hope we see more advancement in 2014.</blockquote></div></div>

]]></content>
  </entry>
  
</feed>
