<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Foss | Geshan's Blog]]></title>
  <link href="http://yoursite.com/blog/categories/foss/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-10-31T08:05:28+04:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[Geshan Manandhar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[4 Git Tips Beyond the Basics]]></title>
    <link href="http://yoursite.com/blog/2014/07/28/4-git-tips-beyond-basics/"/>
    <updated>2014-07-28T10:23:00+04:00</updated>
    <id>http://yoursite.com/blog/2014/07/28/4-git-tips-beyond-basics</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">What is common between Google, Facebook, Microsoft, Twitter and Linked in? If you are looking for the answer its <a href="http://git-scm.com/" target="_blank">Git</a>&nbsp;the Distributed Version Control System (DVCS) that has simplified software revision control. Its major <a href="http://git-scm.com/about" target="_blank">features</a> are speed and performance combined with ease of use provided you know the basic git concepts.<br /><br />If you are new to git you should read some <a href="http://geshan.blogspot.ae/2012/02/git-introduction-and-hand-on-usage.html" target="_blank">getting started</a> tutorials or if you have used SVN you should read <a href="http://git-scm.com/book/en/Git-and-Other-Systems-Migrating-to-Git" target="_blank">migrating to git</a>. For the audience of this post, I assume that you are already using git for some time and are familiar with concepts like commit, push a branch, pull changes from remote repository, merging a branch to &#8220;master&#8221; and similar daily things that git users normally do.<br /><br />Git is a lot more popular than SVN or Mercurial. If you take check Google trends in the past 5 years (July 2009 - July 2014) in Internet and Telecom category, git it twice or move as popular as the other two:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-MYWJgIxDJRo/U9Xant4rMHI/AAAAAAAA0rM/6e3mV34bYX0/s1600/git-vs-svn-vs-mercurial.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-MYWJgIxDJRo/U9Xant4rMHI/AAAAAAAA0rM/6e3mV34bYX0/s1600/git-vs-svn-vs-mercurial.png" height="452" width="640" /></a></div><h2 style="text-align: left;">More on Git</h2><div>I started using git in early 2009, then I has little experience with SubVersion (SVN) and git was a refreshing change to slow and difficult SVN. At that time, we did not do much branching or follow the <a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank">git flow</a>&nbsp;branching model.<br /><br />I rediscover the power of Git in 2012 when I joined <a href="http://www.namshi.com/" target="_blank">Namshi</a> where we were a bigger team than I used to work with and Git made total sense. We were also using a revised git flow with lots of branching, merging, rebasing and tagging for releases.</div><div><br /></div><div>Recently I watched a video &#8220;Git happens&#8221; by&nbsp;<a href="http://twitter.com/jessitron" target="_blank">@Jessitron</a>&nbsp;and I refreshed the git concepts. This <a href="http://jessitron.github.io/git-happens/" target="_blank">video</a> is great not only that she is talking about git, also because it&#8217;s not a presentation she uses a whiteboard, markers and some sticky notes to make all the most important git concepts very clear to you. If you are using git I really recommend watching this:</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><iframe allowfullscreen="" frameborder="0" height="281" mozallowfullscreen="" src="//player.vimeo.com/video/46010208?portrait=0" webkitallowfullscreen="" width="500"></iframe><br /></div><div><br />And remember when using Git, its about telling the story of your project, how you and your team decide it will help maintain and informative history of your project.&nbsp;</div><h2 style="text-align: left;">The Tips</h2><div>Some Git tips beyond the basics (commit, pull, push) are as follows:<br /><h3 style="text-align: left;">Diff (what changed?)</h3></div><div>So you are working on a new feature on your branch my-feature, before you commit, you do a git status to list your files, then you need to know what changed in the files you should do <b>git diff</b> on your working directory. It will see all the changes you have made.</div><div><br /></div><pre class="shell" name="code">ᐅ git diff <br /><br />diff --git a/Dockerfile b/Dockerfile<br />index 392e7c0..a0a7c9f 100644<br />--- a/Dockerfile<br />+++ b/Dockerfile<br />@@ -48,6 +48,13 @@ ADD build/sites-enabled/dashboard       /etc/nginx/sites-enabled/dashboard<br /> ADD build/sites-enabled/test.local    /etc/nginx/sites-available/test.local<br /> ADD build/sites-enabled/test.local    /etc/nginx/sites-enabled/test.local<br /> <br />+ADD build/sites-enabled/drupal7.local    /etc/nginx/sites-available/drupal7.local<br />+ADD build/sites-enabled/drupal7.local    /etc/nginx/sites-enabled/drupal7.local<br />+<br />+ADD build/sites-enabled/drupal8.local    /etc/nginx/sites-available/drupal8.local<br />+ADD build/sites-enabled/drupal8.local    /etc/nginx/sites-enabled/drupal8.local<br />+<br />+#phpmyadmin<br /> ADD build/sites-enabled/phpmyadmin    /etc/nginx/sites-available/phpmyadmin<br /> ADD build/sites-enabled/phpmyadmin    /etc/nginx/sites-enabled/phpmyadmin<br /> <br />diff --git a/readme.md b/readme.md<br />index 7ddea6c..4188d66 100644<br />--- a/readme.md<br />+++ b/readme.md<br />@@ -1,6 +1,6 @@<br /> # Docker: Ubuntu, Nginx and PHP Stack<br /> <br />-This is the basis for LEMP stack (minus MySQL). This is based on [phusion/baseimage-docker](https://github.com/phusion/baseimage-docker) base Ubuntu image, which takes care of system issues which Docker's base Ubuntu image does not take care of, such as watching processes, logrotate, ssh server, cron and syslog-ng.<br />+This is the basis for LEMP stack (without MySQL). This is based on [phusion/baseimage-docker](https://github.com/phusion/baseimage-docker) base Ubuntu image, which takes care of system issues which Docker's base Ubuntu image does not take care of, such as watching processes, logrotate, ssh server, cron and syslog-ng.<br /></pre><div><br />You can also use git diff if you have already added the files to the staging area with git add, you will need to use <b>git diff &#8211;cached. </b>Diff can be used to compare branches and commits for example:<br /><br /><pre class="shell" name="code">✹✭ ᐅ <br />git diff master...my-feature<br /><br />diff --git a/Dockerfile b/Dockerfile<br />index 9f9cd77..392e7c0 100644<br />--- a/Dockerfile<br />+++ b/Dockerfile<br />@@ -6,34 +6,115 @@ RUN /etc/my_init.d/00_regen_ssh_host_keys.sh<br /> <br /> CMD ["/sbin/my_init"]<br /> <br />+# install certificates<br />+ADD build/certificates/server.crt /etc/nginx/certificates/<br />+ADD build/certificates/server.key /etc/nginx/certificates/<br />+<br /> # Nginx-PHP Installation<br /> RUN apt-get update<br /> RUN apt-get install -y vim curl wget build-essential python-software-properties<br /> RUN add-apt-repository -y ppa:ondrej/php5<br /> RUN add-apt-repository -y ppa:nginx/stable<br />+<br /> RUN apt-get update<br />+RUN apt-get install -y python-software-properties python python-setuptools ruby rubygems<br /></pre><br />It can be used on github as well, with a URL like:&nbsp;<a href="https://github.com/geshan/angular-presentation/compare/master...more-intro">https://github.com/geshan/angular-presentation/compare/master&#8230;more-intro</a>&nbsp;- so this is comparing master with the more-info branch. The same can be done with commit hashes.<br /><h3 style="text-align: left;">Global Git Ignore</h3><div>If you use an IDE and it creates folders like .settings or .idea and you want to ignore it globally on all git repositories you can do it with global git ignore rather than adding it to each .gitignore file in each repository. You can create a file say <b>global_gitignore </b>on your home directory and list the folders and files you want to be ignored in all git repositories like:</div><div><pre class="shell" name="code">#global git ignore<br />.idea<br />.settings<br /><br />/test.txt<br /></pre></div><div><br /></div>Then run the following command you will have the above git ignore rules applied to all the git repositories:<br /><pre class="shell" name="code">git config --global core.excludesfile ~/.gitignore_global<br /></pre><br />There are a lot of other <a href="http://git-scm.com/book/en/Customizing-Git-Git-Configuration" target="_blank">git configurations</a> you can try and tune git to meet your needs, if you want to look at the current configs applied to your git globally do <b>cat .gitconfig </b>on your home directory.<br /><h3 style="text-align: left;">Stash your work</h3></div><div>You are working on feature-a, an urgent bug say bug-x is discovered and you need to leave what you were doing for feature-a and fix bug-x. What do you do with the changed files in branch feature-a that you were working on, you don&#8217;t wan&#8217;t to commit or push it as its a work in progress. Here comes git stash to your rescue, you can just stash what you were doing on branch feature-a and finish work of bug-x then come back to feature-a branch and pop or apply your stash. How?<br /><br /></div><div><pre class="shell" name="code">✹ ᐅ cd my-project<br />✹ ᐅ git checkout -b feature-a<br /><br /># working on feature-a, some files changed say 3 of them<br /># bug-x discovered, need to fix it urgently so let's stash changes<br /># (save them for later)<br />✹ ᐅ git stash save feature-a<br /><br /># lets go to master and create a new branch to fix bug-x<br />✹ ᐅ git checkout master<br />✹ ᐅ git checkout -b bug-x<br /><br /># work to fix bug x for 1 hr, its fixed now.<br />✹ ᐅ git add .<br />✹ ᐅ git commit -m 'bug-x fixed with change in config files'<br />✹ ᐅ git push origin bug-x<br /><br /># then open a pull request on github for bug-x,<br /># and come back to working on feature-a<br /><br />✹ ᐅ git checkout feature-a<br />✹ ᐅ git stash pop</pre># all your changed files are back and you are at the stage<br /># where you left it before fixing bug-x</div><br />Stash pop will remove the last stash, you can do &nbsp;<b>git stash list </b>to check all your stashes, stashes can be saved without name and can be applied with the hash. Check the <a href="http://git-scm.com/book/en/Git-Tools-Stashing" target="_blank">stashing</a> docs for more information, generally I follow the above flow for staging and prefer not having any stashes in the list.<br /><h3 style="text-align: left;">Squash your commits</h3><div>You did this big feature taking 4 days work and as a good git user you did commits when the code was stable. So now you have 10 commits in total for the feature-b you worked in for 4 days. Do you really want to send a Pull Request with 10 commits, may be along the way you wrote some commits messages that are not so relevant now. So how do you get the 4 commits to become 1, its easy you squash your commits using&nbsp;<b>git reabse -i,</b>&nbsp;how?<br /><br />Now you have 4 commits (shown using <a href="http://git-scm.com/docs/gitk" target="_blank">gitk</a> ) on top of master:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-QhfIl3q029o/U9Xlc_2tD_I/AAAAAAAA0rc/6A0maq6LFKY/s1600/gitk-4-commits.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-QhfIl3q029o/U9Xlc_2tD_I/AAAAAAAA0rc/6A0maq6LFKY/s1600/gitk-4-commits.png" height="522" width="640" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">you need to execute the following command:</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"></div><pre class="shell" name="code">✹ ᐅ git rebase -i HEAD~4 #the last number, here 4 is the no. of commits you want to squash.<br /><br /># you will get a screen like this :<br /><br />pick 8dd81e6 feature-b changes to the config files<br />pick 7ea892d Feature-a fixed class A b and C<br />pick a465749 Feature-b fixed tests<br />pick cd6f406 Feature-b fixed tests<br /><br /><br /># change all picks except of the first one to s. <br /># s is short for squash like below:<br />pick 8dd81e6 feature-b changes to the config files<br />s 7ea892d Feature-a fixed class A b and C<br />s a465749 Feature-b fixed tests<br />s cd6f406 Feature-b fixed tests<br /><br /># now exit your editor, if you are using vim :wq<br /># then as you are squashing commits you can select which commit messages to pick<br /># from a screen like:<br /># This is a combination of 4 commits.<br /># The first commit's message is:<br />feature-b changes to the config files<br /><br /># This is the 2nd commit message:<br /><br />Feature-a fixed class A b and C<br /><br />- [x] Works for A and B<br /><br /># This is the 3rd commit message:<br /><br />Feature-b fixed tests<br /><br />* fixed most test<br /><br /># This is the 4th commit message:<br /><br />Feature-b fixed tests<br /><br />- [x] fixed all tests<br /><br /><br /># Pick the ones that you need or delete, for this example I will not delete anything<br /># and quit the editor<br /><br /># 4 of your commits are squashed into 1.<br /></pre><div class="separator" style="clear: both; text-align: left;"><br /></div>If your commit squash was successful, you will see only 1 commit in place of the 4 on gitk with all commit messages intact, like:<br /><div class="separator" style="clear: both; text-align: center;"></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-JSpIRmrwP6w/U9XncahVmRI/AAAAAAAA0rw/1pZY7m7Kidg/s1600/gitk-4-commts-squashed.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-JSpIRmrwP6w/U9XncahVmRI/AAAAAAAA0rw/1pZY7m7Kidg/s1600/gitk-4-commts-squashed.png" height="640" width="614" /></a></div></div><h2 style="text-align: left;">Conclusion</h2><div>This is just scratching the surface of git there are lots of other things that can be done with git, like <a href="http://git-scm.com/docs/git-cherry-pick" target="_blank">cherry pick</a> commits, list <a href="http://www.commandlinefu.com/commands/view/2345/show-git-branches-by-date-useful-for-showing-active-branches" target="_blank">git branches sorted by created date</a>, <a href="http://webchick.net/node/99" target="_blank">bisect</a> for debugging, you have to know how to <a href="http://githowto.com/resolving_conflicts" target="_blank">fix conflicts</a> with tools like <a href="http://meldmerge.org/" target="_blank">meld</a>&nbsp;etc.<br /><br />Then you have <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks" target="_blank">git hooks</a> which open up a new world of its own like having pre-commit hooks to <a href="http://carlosbuenosvinos.com/write-your-git-hooks-in-php-and-keep-them-under-git-control/" target="_blank">do checks of code and run tests</a>. Git has also been used to version control text related projects like <a href="https://www.gitbook.io/" target="_blank">books</a> not only code. So the possibilities are endless and if you are not using Git you are missing on a lot of things.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Bundles to Get Started With REST in Symfony 2 and Some Tips]]></title>
    <link href="http://yoursite.com/blog/2014/07/18/3-bundles-to-get-started-with-rest-in/"/>
    <updated>2014-07-18T10:55:00+04:00</updated>
    <id>http://yoursite.com/blog/2014/07/18/3-bundles-to-get-started-with-rest-in</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">&#8220;I found out that you guys just build an amazing mobile app for your e-commerce venture, I heard you are using Symfony 2 for your back-end APIs. How did you make it that fast?&#8221; This is not very different that what I was asked some months back. The answer is we use a <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank">Service Oriented Architecture (SOA) </a>where all back-end service follow the REST architecture to communicate with all the clients. The client can be built in any language as longs a they can do HTTP calls. Lets look at what Symfony 2 bundles you can use to build a similar scalable, fast and cacheable REST APIs.<br /><br />I assume that you have some experience with Symfony 2 including how to use <a href="https://getcomposer.org/doc/00-intro.md" target="_blank">composer</a> to download dependent libraries/bundles.<br /><h2 style="text-align: left;">What is REST</h2>REST, short form for&nbsp;Representational state transfer is a resource based client and server communication protocol which is stateless and cacheable. It is an abstraction over HTTP communication where emphasis is given on uniform interface to make the communication structured and consistent. This <a href="http://www.restapitutorial.com/lessons/whatisrest.html" target="_blank">video</a> describes the constraints of REST and explains what it is or read a simpler <a href="http://rest.elkstein.org/2008/02/what-is-rest.html" target="_blank">one</a>.<br /><br />REST is a lightweight substitute to older ways of doing web services like <a href="http://en.wikipedia.org/wiki/Remote_procedure_call" target="_blank">Remote Procedure Call</a> (RPC) and <a href="http://en.wikipedia.org/wiki/SOAP" target="_blank">Simple Object Access Protocol</a> (SOAP). Basically communication in REST happens in light weight format like JSON which makes it fast.<br /><br />Describing REST involves having knowledge if the HTTP methods (verbs) like GET, POST, PUT, DELETE. Before proceeding further <a href="http://www.restapitutorial.com/lessons/httpmethods.html" target="_blank">knowing</a>&nbsp;what are they used for will be essential. There is also lots of fuss about <a href="http://www.restapitutorial.com/lessons/restfulresourcenaming.html" target="_blank">how to name resources</a> (and corresponding URIs) but rather than doing things by the book making it logical and practical can be the best solution.<br /><br /><h2 style="text-align: left;">RESTing With Symfony 2</h2><div><a href="http://symfony.com/" target="_blank">Symfony</a> is a very loosely coupled framework which has lots of useful components structured in easily plug-able bundles. Here are 3&nbsp;useful public Symfony 2 bundles for your next project using REST with Symfony.</div><h3 style="text-align: left;">FOSRestBundle</h3><div>The <a href="https://packagist.org/packages/FriendsOfSymfony/rest-bundle" target="_blank">FOSRestBundle</a> provides a solid foundation to start building RESTful services in Symfony 2. It can provide with automated routing for resources (probably doctrine entity if you use doctrine). It provides a very good base for a format (JSON/HTML/XML) independent view layer.&nbsp;</div><div><br /></div><div>If you want to be able to encode or decode multiple format <a href="https://github.com/FriendsOfSymfony/FOSRestBundle" target="_blank">FOSRestBundle</a> recommends using <a href="https://github.com/schmittjoh/JMSSerializerBundle" target="_blank">JMSSerializerBundle</a>. The serializer bundle is like glove on the hand with FOSRestBundle to give out response in JSON/HTML/XML. Please go through the <a href="https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> very well and for custom routing you can use Symfony routing and not the one provide by FOSRestBundle. It is one of the most popular bundles in <a href="http://knpbundles.com/best" target="_blank">KNPBundles</a> and has been downloaded more than 784K times.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-dSAVmuiGqgw/U8i7PyW6H6I/AAAAAAAA0ns/w7KSttIS_VE/s1600/fos-rest-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-dSAVmuiGqgw/U8i7PyW6H6I/AAAAAAAA0ns/w7KSttIS_VE/s1600/fos-rest-bundle.png" height="410" width="640" /></a></div><h3 style="text-align: left;">NelmioApiDocBundle</h3><div><a href="https://packagist.org/packages/nelmio/api-doc-bundle" target="_blank">NelmioApiDocBundle</a> is a boon when developing REST web services on Symfony2. The <a href="https://github.com/nelmio/NelmioApiDocBundle" target="_blank">bundle</a> enables clean documentation of all API end points by just using some structured annotation. There are at least 2 amazing benefits using this bundle, first you can give the link to the docs (generally /api/doc) to anyone who wants to implement the REST API you have created. Second while developing you can test your API with the sandbox feature provided by this useful bundle, if you use the annotations correctly linking the involved forms.</div><div><br /></div><div>Restricting sandbox with user access might be a good feature to add on on this bundle. Reading the full <a href="https://github.com/nelmio/NelmioApiDocBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> is highly encouraged. It is also a very popular bundle with 473K downloads till date.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-dPLuYKdnhWc/U8i9kyXe7cI/AAAAAAAA0n4/kUl3jGfiU3M/s1600/nelmio-api-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-dPLuYKdnhWc/U8i9kyXe7cI/AAAAAAAA0n4/kUl3jGfiU3M/s1600/nelmio-api-bundle.png" height="520" width="640" /></a></div><div><h3>LexikJWTAuthenticationBundle</h3><div>As discussed REST is stateless, so for authentication you have to opt for some mechanism that can be communicate with each request. You can go for something like <a href="http://oauth.net/" target="_blank">Oauth</a>&nbsp;or use JSON Web Signature (JWS). There is already a public bundle the&nbsp;<a href="https://packagist.org/packages/lexik/jwt-authentication-bundle" target="_blank">LexikJWTAuthenticationBundle</a> using the <a href="https://github.com/namshi/jose" target="_blank">JOSE</a> library built at Namshi. It is recommended that you read about JWS and JSON Web Token (JWT) before using this bundle. It can be used by putting the token as a cookie for each request.</div></div><div><br /></div><div>It will enable role based access to your API end points, lets say you want normal users to create users and only admin users to update/delete users that will be easily possible using this <a href="https://github.com/lexik/LexikJWTAuthenticationBundle" target="_blank">bundle</a> than trying to generate a time limited key or some other type of authentication. Yes, reading the <a href="https://github.com/lexik/LexikJWTAuthenticationBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> of the bundle will help you achieve the desired output.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-WL-v27TBctg/U8jEeA0dvPI/AAAAAAAA0oM/3n8Smx-h-KQ/s1600/jwt-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-WL-v27TBctg/U8jEeA0dvPI/AAAAAAAA0oM/3n8Smx-h-KQ/s1600/jwt-bundle.png" height="342" width="640" /></a></div><br /></div><div><br /></div><div>I hope these modules will come in handy when you start your REST Api with symfony. For more features and to leverage REST to the fullest you can take a look at&nbsp;<a href="https://github.com/willdurand/BazingaHateoasBundle" target="_blank">BazingaHateoasBundle</a>&nbsp;and&nbsp;<a href="https://github.com/hautelook/TemplatedUriBundle" target="_blank">TemplatedUriBundle</a>.</div><h2 style="text-align: left;">Other Tips</h2><div>Some other things you can consider when building a REST based API with Symfony 2 are:</div><div><ol style="text-align: left;"><li>Use the validation groups in Symfony 2 and keep all the validation conditions as annotation in the Entity itself than at multiple places.</li><li>Keep the handing of forms central, though you will not show any HTML forms for the purpose of validation use the Symfony forms on top of the entities and link them to controllers which expose the end points.</li><li>Use the HTTP status code wisely like when a resource is created its not 200 OK its 201 Created, when you are paging results 206 will make for sense and if the user sent bad data 400 Bad Request is better.</li><li>&nbsp;Think how will you version your API early when you develop your API if today you use /api/V1 how will you use api/V2 and what will be its consequences.</li><li>Last but not he least be liberal on what you accept and strict on what you give out.</li></ol><div><blockquote>All in all Symfony is a great framework and doing REST in Symfony though not a piece of cake but is challenging yet rewarding.&nbsp;</blockquote></div></div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Free Apps to Bootstrap Your Budding Tech Startup]]></title>
    <link href="http://yoursite.com/blog/2014/06/20/5-free-apps-to-bootstrap-your-budding/"/>
    <updated>2014-06-20T11:12:00+04:00</updated>
    <id>http://yoursite.com/blog/2014/06/20/5-free-apps-to-bootstrap-your-budding</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Bootstrapping a tech start up with limited financial resources is always a difficult task in hand. You have to find the right balance between the cost and the benefit of the money spent. As a new entrepreneur if you could get some great software for the price of 0 that would really expedite the tech related company bootstrapping process.<br /><h2 style="text-align: left;">Introduction</h2>In this context lets discuss about some free software that will really help you get some amazing benefits. I would like to keep this post as programming language agnostic as possible. Subsequently, I believe though you don&#8217;t need to pay for the software a good web host will be necessary that provides shell and software installation access (like <a href="http://aws.amazon.com/" target="_blank">Amazon AWS</a> or <a href="https://www.linode.com/" target="_blank">Linode</a>) to install the software mentioned later in this post.<br /><br />This post is going to cover software/SAAS for Project Management , group chat and notification, source code collaboration with version control (git), deployment automation and error/log monitoring of the deployed application.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-9jKOshkGQoM/U6PbcQcg40I/AAAAAAAA0fs/KugrkesoILg/s1600/5-apps-for-bootstraping-tech-stratup.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-9jKOshkGQoM/U6PbcQcg40I/AAAAAAAA0fs/KugrkesoILg/s1600/5-apps-for-bootstraping-tech-stratup.jpg" height="400" width="400" /></a></div><br /><h2 style="text-align: left;">The Apps</h2><h3 style="text-align: left;">Redmine for Project Management</h3><div>Redmine is a flexible <a href="http://www.redmine.org/" target="_blank">project management tool</a> that can be self hosted on your own server. It helps you keep track of all the ideas, features and bugs that pertain to your application. It is very flexible and configurable to the flow you want to choose for your project management. If you follow an agile, scrum type approach with Kanban it can easily support that flow. If you are looking for free hosted project management tools you can have a look at <a href="http://www.trello.com/" target="_blank">Trello</a> or <a href="http://www.asana.com/" target="_blank">Asana</a>.&nbsp;</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-DYvgFZjlSss/U6PQd8o7UeI/AAAAAAAA0fc/6BgGRcXblJA/s1600/redmine.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-DYvgFZjlSss/U6PQd8o7UeI/AAAAAAAA0fc/6BgGRcXblJA/s1600/redmine.png" height="327" width="400" /></a></div><div><br /></div><h3 style="text-align: left;">Hipchat for Group Chat and Notification</h3><div>Hipchat is an amazing <a href="http://www.hipchat.com/" target="_blank">chat application</a> that support one to one and group chats, it is great to search your previous chats online and integrates very well with other applications. A real world use case is our deployments are notified on Hipchat. They have a paid plan as well but the free plan is enough to start with. Interestingly they have apps for <a href="https://www.hipchat.com/download" target="_blank">all relevant platforms</a>. If you still want to go old school you can opt for <a href="http://www.skype.com/en/" target="_blank">Skype</a> or good old Google chat.&nbsp;</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-BItraTwu45k/U6PbiHHoskI/AAAAAAAA0f0/3yhpxFMUNgg/s1600/hipchat.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-BItraTwu45k/U6PbiHHoskI/AAAAAAAA0f0/3yhpxFMUNgg/s1600/hipchat.png" height="400" width="398" /></a></div><div><br /></div><h3 style="text-align: left;">GitLab for private git hosting</h3><div>Git is a distributed version control system which is flexible, configurable, popular and very useful to put your source code under version control. If you follow a good <a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank">git flow and branching</a> model it can be very productive for your team. As a startup if you don&#8217;t want to pay for private git hosting at <a href="http://www.github.com/" target="_blank">GitHub</a>&nbsp;, <a href="https://about.gitlab.com/" target="_blank">GitLab</a>&nbsp;community edition is a very good self hosted alternative or hosted at <a href="https://gitlab.com/users/sign_up">Gitlab.com</a>. Gitlab has great features where you can manage repositories and user permissions, open pull request and collaborate by comments etc. If you are looking for a hosted alternative <a href="https://bitbucket.org/plans" target="_blank">BitBucket</a> gives a free 5 user unlimited private repository free plan.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-CcnSosmignQ/U6PbmhQ4rLI/AAAAAAAA0f8/M7xusFq_8qA/s1600/gitlab.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-CcnSosmignQ/U6PbmhQ4rLI/AAAAAAAA0f8/M7xusFq_8qA/s1600/gitlab.png" height="400" width="397" /></a></div><div><br /></div><h3 style="text-align: left;">Dploy.io for Continuous Deployment</h3><div>The more things you can automate the better it is from a cost point of view. Dploy.io is a hosted <a href="http://dploy.io/" target="_blank">continuous deployment service</a> that can deploy your code from Github or other git repo to Heroku, AWS and even your own server with SSH access or FTP and SFTP. It is easy to link the repository from sources like github and deploy it to the destination server. It makes the deployment quite easy and seamless which needs some initial configuration. For the free plan it allows one repository linked with unlimited destination servers and unlimited deployments.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-WcjZkZTgHMQ/U6PbrwfYXnI/AAAAAAAA0gE/iiDRZR4t6o8/s1600/dploy.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-WcjZkZTgHMQ/U6PbrwfYXnI/AAAAAAAA0gE/iiDRZR4t6o8/s1600/dploy.png" height="380" width="400" /></a></div><div><br /></div><h3 style="text-align: left;">NewRelic for Application Monitoring</h3><div>NewRelic is a handy <a href="http://newrelic.com/pricing" target="_blank">application monitoring and exception/error notification tool</a> which is useful for real time reporting of running applications. NewRelic is our go to app after each deployment to check if anything has gone wrong where it shows all the related errors and exceptions. NewRelic also provides information about application response times, deployment notification and other important information about servers as well. New Relic now also supports mobile apps monitoring which is a great new feature. The free plan gives 24 hours data retention. <a href="http://graylog2.org/" target="_blank">Graylog2</a> is an amazing log analyzing alternative but may need to be self hosted and <a href="http://loggr.net/" target="_blank">Loggr</a> looks quite promising as well.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-J7YZ00fytU4/U6PdIb8-1dI/AAAAAAAA0gQ/FowbUidK1Bo/s1600/newrelic.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-J7YZ00fytU4/U6PdIb8-1dI/AAAAAAAA0gQ/FowbUidK1Bo/s1600/newrelic.png" height="358" width="400" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">When you choose apps, you should also think of a smooth migration plan or an upgraded plan. It will help easy migration to a better vendor when needed.</div><h2 style="text-align: left;">Conclusion</h2><div>Even for a start-up you will always need a good process and system in place. If you can automate your flows it would greatly help for the sustainability of the business. If the best practices for coding, testing and continuous integration can be followed by the development team with great software architecture and design it will make rolling out new features easy. Above application will help in achievement of these goals. &nbsp;</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ingredients of a Great Front End Application With AngularJs]]></title>
    <link href="http://yoursite.com/blog/2014/02/07/ingredients-of-great-front-end/"/>
    <updated>2014-02-07T09:32:00+04:00</updated>
    <id>http://yoursite.com/blog/2014/02/07/ingredients-of-great-front-end</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">In the past 12 months the popularity of AngularJs has exploded, which clearly hints that applications are being built following the multi-tire architecture. A good back-end API with a front end consumer application surely makes a capable duo that can handle any requirements of the application. If you have a multi-tire architecture then you don&#8217;t need to rebuild the back-end for serving data for other applications like a mobile application or any data requirement.<br /><br /><div class="separator" style="clear: both; text-align: center;"></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-cR5rMFn2Eho/UvRkqrXlCDI/AAAAAAAAnes/JZThI0jhcS4/s1600/Selection_005.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-cR5rMFn2Eho/UvRkqrXlCDI/AAAAAAAAnes/JZThI0jhcS4/s1600/Selection_005.png" height="369" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Popularity of Angular JS, source <a href="http://www.google.com/trends/explore#q=angularjs%2C%20emberjs%2C%20backbonejs&amp;date=today%2012-m&amp;cmpt=q" target="_blank">Google Trends</a></td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"></div><br /><h3 style="text-align: left;">Why Front-end applications?</h3>Front end applications with java-script run on the user&#8217;s browser, when the data interaction is moved to models and services supported by a framework it makes the front end application very powerful. This also enables the concept of <a href="http://en.wikipedia.org/wiki/Single-page_application" target="_blank">Single Page Application</a> (SPA). Below are the <b>7 ingredients</b> of a great front end application with <b>Angularjs</b> being the main ingredient.<br /><h3 style="text-align: left;">AngularJs</h3><a href="http://angularjs.org/" target="_blank">AngularJs</a> is a &#8220;Superheroic JavaScript MVW Framework&#8221; by Google which lets the developers abstract out the model view controller on front end (user browser) level. Its amazing <a href="http://sporto.github.io/blog/2013/04/12/comparison-angular-backbone-can-ember/" target="_blank">features</a> include two way data binding, routing and directives to name some. Angular with its <a href="http://code.tutsplus.com/tutorials/5-awesome-angularjs-features--net-25651" target="_blank">features</a> and flexibility might be your safest bet if you want to develop a front end application consuming data from a back-end API service.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-US25BlWq9Z8/UvRkyib883I/AAAAAAAAne4/a8AmMj7gORQ/s1600/angular_home.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-US25BlWq9Z8/UvRkyib883I/AAAAAAAAne4/a8AmMj7gORQ/s1600/angular_home.jpg" height="321" width="640" /></a></div><br /><h3 style="text-align: left;">YeoMan</h3><a href="http://yeoman.io/" target="_blank">Yeoman</a> is a scaffolding which provides generators that can speed up the application development process. It supports Angular, when combined with other great applications it helps you build your front end application with ease. It does the heavy lifting for you so that you can focus on the code better. As mentioned:<br /><blockquote>Yeoman is a robust and opinionated client-side stack, comprising tools and frameworks that can help developers quickly build beautiful web applications. We take care of providing everything needed to get started without any of the normal headaches associated with a manual setup.</blockquote><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-erIDXTqhAAE/UvRn2ftJlGI/AAAAAAAAnfA/K529macB_34/s1600/yeoMan.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-erIDXTqhAAE/UvRn2ftJlGI/AAAAAAAAnfA/K529macB_34/s1600/yeoMan.jpg" height="446" width="640" /></a></div><h3 style="text-align: left;">Bower</h3><div><a href="http://bower.io/search/" target="_blank">Bower</a> is a package manager for javascript projects. <a href="https://getcomposer.org/" target="_blank">Composer</a> is the main dependency and package manger for PHP, similarly bower is the dependency manager for Javascript. It has a lot of packages which can be used for your project and managing the dependencies is matter of just one bower.json file on your project. You just do a bower install and all the dependencies are downloaded for you.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-jqH0ALKrubw/UvRqdUkoNAI/AAAAAAAAnfM/2fif9_dsIsk/s1600/bower.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-jqH0ALKrubw/UvRqdUkoNAI/AAAAAAAAnfM/2fif9_dsIsk/s1600/bower.jpg" height="318" width="640" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><h3 style="text-align: left;">GruntJs</h3><div><a href="http://gruntjs.com/" target="_blank">Grunt</a> is a javascript task runner, it can automate tasks so that you can focus more on the development. In relation with AngularJs it can be used to start the server, check file changes to compile with the new changes and perform auto reload, check for JSLint, run your tests etc. You can configure the tasks in a grunt file and utilize its powerful API to create your own tasks.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-smmph9DImZs/UvRqdhJFmOI/AAAAAAAAnfk/NSDyhxvQIVQ/s1600/gruntjs.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-smmph9DImZs/UvRqdhJFmOI/AAAAAAAAnfk/NSDyhxvQIVQ/s1600/gruntjs.jpg" height="340" width="640" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><h3 style="text-align: left;">Jade</h3><div>Now you have a good separation of your front and and you are coding some javascript model, services and controller. How would you manage the view/template part of the application. There are many options like <a href="http://handlebarsjs.com/" target="_blank">Handelbars</a>, <a href="http://paularmstrong.github.io/swig/" target="_blank">Swig</a>&nbsp;(similar to <a href="http://twig.sensiolabs.org/" target="_blank">Twig</a>&nbsp;in php) but using <a href="http://jade-lang.com/" target="_blank">Jade</a> might be easier.&nbsp;Jade is like a compressed version of HTML which makes writing templates much easier and faster. Jade files can be compiled to output as HTML with a grunt task.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-9XOB_4jdzFE/UvRqeLf0hZI/AAAAAAAAnfo/KnnmSRPq3JA/s1600/jade-html.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-9XOB_4jdzFE/UvRqeLf0hZI/AAAAAAAAnfo/KnnmSRPq3JA/s1600/jade-html.jpg" height="338" width="640" /></a></div><div><br /></div><h3 style="text-align: left;">Compass CSS</h3><div><a href="http://compass-style.org/" target="_blank">Compass</a> is a open source CSS authoring framework that use <a href="http://sass-lang.com/" target="_blank">Sass</a> to make writing CSS logical, easy and painless. It is like making CSS programmable with variables, nesting styles and other features which helps on making CSS code reusable and maintainable. Easy to <a href="http://compass-style.org/install/" target="_blank">install</a> and easier to get started with Compass will change the way you write CSS.&nbsp;</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-U4t6ljJWUPk/UvRqddaqmcI/AAAAAAAAnfg/OUDogJvvPds/s1600/compass-css.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-U4t6ljJWUPk/UvRqddaqmcI/AAAAAAAAnfg/OUDogJvvPds/s1600/compass-css.jpg" height="426" width="640" /></a></div><div><br /></div><h3 style="text-align: left;">JasmineJs&nbsp;</h3><div>Now you have great java-script code a well managed front end with Jade and Compass, how about some testing. <a href="http://jasmine.github.io/" target="_blank">JasmineJs</a> is a behavior driven development framework for testing javascirpt code. Test suites describe the tests and match the output. You can even use a custom solution with other libraries like <a href="http://phantomjs.org/" target="_blank">PhantomJs</a>. Still Jasmine can be a very <a href="http://www.tuesdaydeveloper.com/2013/06/angularjs-testing-with-karma-and-jasmine/" target="_blank">good option</a> for testing AngularJs application.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-UjLwCDcW6EU/UvRqeAztAPI/AAAAAAAAnfw/Ml3JK2VP0X4/s1600/jasmine-js.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-UjLwCDcW6EU/UvRqeAztAPI/AAAAAAAAnfw/Ml3JK2VP0X4/s1600/jasmine-js.png" height="308" width="640" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><h3 style="text-align: left;">Conclusion</h3><div>Using the right tools and technology to do your job will always benefit you, it will save time and effort maximizing productivity. A good mix and match of all the ingredients would yield desired results, I hope these you will use these tools when you think of developing a new front end application.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 PHP Development Improvements Rediscovered in 2013]]></title>
    <link href="http://yoursite.com/blog/2014/01/10/5-php-development-improvements/"/>
    <updated>2014-01-10T11:27:00+04:00</updated>
    <id>http://yoursite.com/blog/2014/01/10/5-php-development-improvements</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Love it or hate it, the fact is <a href="http://w3techs.com/technologies/history_overview/programming_language" target="_blank">80% of the web</a> is PHP and its usage has been in an increasing trend since 2010. Be informed that PHP is much better than you think as per&nbsp;<a href="http://fabien.potencier.org/article/64/php-is-much-better-than-you-think" target="_blank">Fabien Potencier</a>. As a <a href="http://tech.namshi.com/portfolio/" target="_blank">team</a>, we&nbsp;have worked a lot on PHP this year, specifically on <a href="http://symfony.com/" target="_blank">Symfony 2</a>&nbsp;mainly for our back-end APIs. It has really strengthen our multi-application <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank">SOA</a> platform and enabled us to build responsive front ends on top of it.<br /><br />In this process of having a robust back-end API, we have rediscovered and utilized some technologies inline with PHP development and improved on them in the past year. Here is a summary of these PHP related technologies/methods/best practices that will help all PHP developers:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-MwFJBHH84Ww/Us-MFH60P6I/AAAAAAAAnTQ/1Y7qEnUuMCU/s1600/005PHP_Things.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-MwFJBHH84Ww/Us-MFH60P6I/AAAAAAAAnTQ/1Y7qEnUuMCU/s1600/005PHP_Things.jpg" height="400" width="400" /></a></div><img /><br /><h3>PHP Specification Request - PSR</h3>PSR (0-3) PHP Specification Request is a set of standards devised by the<a href="http://www.php-fig.org/" target="_blank"> PHP Framework Interoperability Group (FIG)</a> to standardize <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md" target="_blank">auto-loading</a>, <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md" target="_blank">coding standard</a>, <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide-meta.md" target="_blank">coding style</a> and <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md" target="_blank">logger interface</a>. PHP-FIG members include big names like Zend, Symfony, Drupal to name some. We follow a slightly modified version of PSR-2 as our coding standards.<br /><br />Writing clean code is always helpful and if you follow a widely accepted coding standard it makes it easier to open source the code. To make the process better you can use <a href="https://github.com/squizlabs/PHP_CodeSniffer" target="_blank">PHP code sniffer</a> and integrate it with your IDE for code evaluation while you type.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-Jp0OILLv7Lg/Us-HdQ5Mq-I/AAAAAAAAnTE/vMl0Z7gOV_4/s1600/01php_fig_psr.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-Jp0OILLv7Lg/Us-HdQ5Mq-I/AAAAAAAAnTE/vMl0Z7gOV_4/s1600/01php_fig_psr.png" height="243" width="400" /></a></div><br /><h3>Composer and Packagist</h3>Composer is dependency management tool in PHP which lets you define libraries that your project is dependent on. <a href="http://getcomposer.org/" target="_blank">Composer</a> uses simple JSON declaration of dependent project in composer.json files and downloads the related libraries in the vendor folder. <a href="http://getcomposer.org/doc/00-intro.md" target="_blank">Getting started</a> in easy with compser and all the opensource packages are listed in <a href="https://packagist.org/" target="_blank">packagist</a>, where you can search for packages you need.<br /><br />Lets say if you want to work on Paypal and think someone might have submitted a wrapper library for Paypal Rest API, you can search and find the library that suits your need. You can even submit your library/package to be open source and used by others. Composer really makes working with dependency and managing version of the dependent library an easy task.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-UfFC3YJNwQQ/Us-Nw55qorI/AAAAAAAAnTc/MPZ80brxYVc/s1600/02Composer_Packagist.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-UfFC3YJNwQQ/Us-Nw55qorI/AAAAAAAAnTc/MPZ80brxYVc/s1600/02Composer_Packagist.jpg" height="228" width="400" /></a></div><br /><h3>Virtual Development Environment - Vagrant</h3><a href="http://www.vagrantup.com/" target="_blank">Vagrant</a> is a virtual development environment which works as a virtual machine on your main machine with all needed software stack as config. Basically it creates a reproducible and portable development machine which is shared by all the developers, that in turn eliminates &#8220;Works on my machine&#8221; syndrome.<br /><br />Another thing it greatly helps is the time to set up a machine and get running. In our case, it came down from around 2 days to install all the software stack and configure all environments to mere 5 hours including the download of all needed software. If you want your developer to start coding on the first day, this is your best bet as s/he does not need to install the correct version of PHP, MYSQL, X-Debug and all other software.<br /><div class="separator" style="clear: both; text-align: center;"></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-YPC1Uux4_Pk/Us-PYPwyIuI/AAAAAAAAnTw/8Rk1S9x3L1Q/s1600/03Vagrant.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-YPC1Uux4_Pk/Us-PYPwyIuI/AAAAAAAAnTw/8Rk1S9x3L1Q/s1600/03Vagrant.png" height="192" width="400" /></a></div><br /><h3>Debugging with X-Debug</h3>Debugging in PHP used to be that elusive creature that you see sometimes and it just hides when you want to see it. On the contrary if you setup <a href="http://xdebug.org/" target="_blank">X-Debug</a> correctly on your machine (or your vagrant) you can run the debugger and inspect how your code executes line by line. Beware that its a correct mix of X-Debug, a client on your browser like <a href="https://addons.mozilla.org/en-US/firefox/addon/easy-xdebug/" target="_blank">easy Xdebug</a> for firefox and a good IDE that supports debugging like <a href="https://netbeans.org/downloads/index.html" target="_blank">NetBeans</a> or <a href="http://www.jetbrains.com/phpstorm/" target="_blank">PHPStorm</a>. Know well how to <a href="http://net.tutsplus.com/tutorials/tools-and-tips/xdebug-professional-php-debugging/" target="_blank">set it up</a>.<br /><br />In our case, X-Debug is installed on the vagrant machine so each developer does not need to manually install it. Just set up the preferred client on the browser and run the debugger on the IDE, then you can get new insights on how your code executes.<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-KeIbou7dBuc/Us-PV9FMkUI/AAAAAAAAnTs/7E9d2SpfdeQ/s1600/04Xdebug.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-KeIbou7dBuc/Us-PV9FMkUI/AAAAAAAAnTs/7E9d2SpfdeQ/s1600/04Xdebug.png" height="258" width="400" /></a></div><br /><h3>Automated Testing with PHPUnit</h3>When your code is tested and all tests pass (they are green! yehh) you are confident that things will not break on the production environment. Writing test verify what the code is supposed do and it serves as animated documentation of the code. Not only does it help save the development time on the long run, you are already aware of the related things that break due the the changes you made when you coded a feature/fix. We use <a href="http://phpunit.de/" target="_blank">PHPUnit</a>&nbsp;to test on our PHP code so that we know all our features are performing how it should.<br /><br />I would not call our way of testing <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development</a> (TDD) or core <a href="http://en.wikipedia.org/wiki/Unit_testing" target="_blank">Unit Testing</a> of each class. Rather its our own way of ensuring that the feature works as intended. We code the feature first and then write the test to verify if it meets the requirements. We generally ensure that before sending a pull request on <a href="https://github.com/" target="_blank">git hub</a> all the test pass.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-ip-gzNysvCI/Us-UNflvzOI/AAAAAAAAnUA/rkH4w8Q9WX0/s1600/05PhpUnit.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-ip-gzNysvCI/Us-UNflvzOI/AAAAAAAAnUA/rkH4w8Q9WX0/s1600/05PhpUnit.png" height="218" width="400" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">All in all 2013 has been a great year with lots of things to learn and explore, we experimented with many things as we raised our technical know how to a different level in terms of the tools we use. We went from a cron that runs every minute to <a href="http://www.rabbitmq.com/" target="_blank">Rabbit MQ</a> messaging queue that can be a different blog post :).</div><br /><blockquote>Now we follow continuous integration with <a href="https://travis-ci.org/" target="_blank">Travis CI</a>&nbsp;which runs the test we wrote with PHPUnit taking the code from Git Hub. I would like to thank <a href="http://www.namshi.com/" target="_blank">our</a> VP - Technology <a href="http://odino.org/" target="_blank">Alex</a>&nbsp;(<a href="https://twitter.com/_odino_" target="_blank">@_Odino_</a>) for his vision and implementation of &nbsp;above mentioned technologies. Lets hope we see more advancement in 2014.</blockquote></div></div>

]]></content>
  </entry>
  
</feed>
